// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Comment-Cleaner.jflex

//10,11,25,60,2
//Mandenos un fichero correcto please ;_;
import java.io.FileWriter;
import java.io.IOException;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class afiliado {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\0\1\4"+
    "\1\5\1\4\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\16\12\17\1\20\1\3\1\0"+
    "\1\4\1\0\1\3\1\4\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\54\1\56\1\54\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\57\1\47\1\50\1\51\1\52\1\0\1\4"+
    "\1\0\1\4\1\0\5\60\1\61\32\60\1\62\217\60"+
    "\2\63\115\60\1\64\u0200\60\1\62\177\60\13\62\35\60"+
    "\2\61\5\60\1\62\57\60\1\62\312\60\1\65\325\60"+
    "\1\62\377\60\u0100\66";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\2\34\1\2\2\3\1"+
    "\5\0\1\1\4\3\1\1\1\3\1\1\1\3\2\1"+
    "\3\3\1\1\2\3\1\1\1\3\1\1\1\3\1\0"+
    "\1\3\1\1\4\3\1\1\5\3\1\0\4\1\3\3"+
    "\2\0\4\1\1\3\3\1\1\3\1\1\1\3\1\1"+
    "\2\3\1\1\1\3\1\0\1\3\1\1\2\3\1\1"+
    "\1\3\2\1\1\3\3\1\4\3\2\1\2\3\1\1"+
    "\4\3\2\1\1\0\1\1\1\3\1\1\1\3\1\1"+
    "\2\3\3\1\1\3\1\1\1\3\1\1\3\3\1\1"+
    "\1\0\3\3\4\1\1\0\2\1\3\0\1\1\1\0"+
    "\1\2\1\1\1\0\1\1\7\0\4\3\1\0\1\1"+
    "\5\3\1\0\1\1\11\3\1\0\1\3\1\0\2\1"+
    "\1\3\1\1\2\0\2\1\1\0\3\3\1\0\1\3"+
    "\1\1\1\3\1\0\1\3\1\0\3\3\1\1\3\3"+
    "\1\1\4\3\2\0\1\3\1\1\2\3\1\0\2\3"+
    "\2\1\1\0\3\3\1\1\1\0\1\3\1\0\1\1"+
    "\2\0\1\1\5\0\2\1\5\0\1\3\1\0\5\3"+
    "\1\0\2\3\2\0\2\3\1\0\5\1\1\3\1\0"+
    "\2\1\2\3\2\0\1\3\1\1\1\3\1\1\1\3"+
    "\4\0\2\3\1\1\1\3\3\1\2\0\2\1\7\0"+
    "\2\1\2\3\1\0\1\3\2\0\1\3\1\0\1\3"+
    "\2\0\1\3\1\0\3\3\2\0\2\1\11\0\2\3"+
    "\1\0\1\3\1\0\1\3\2\0\2\3\11\0\1\3"+
    "\1\0\1\3\2\0\1\1\1\3\2\0\2\3\14\0"+
    "\1\3\2\0\1\3\1\0\1\3\4\0\1\3\2\0"+
    "\1\3\1\0\1\3\5\0\1\3\5\0\1\3\1\0"+
    "\1\3\6\0\3\3\2\0\1\3\1\0\1\3\6\0"+
    "\3\3\1\0\1\3\3\0\1\3\5\0\1\3\3\0"+
    "\1\3\1\0\1\3\12\0\1\3\5\0\1\3\6\0"+
    "\1\3\11\0\1\3\10\0\1\3\4\0\1\3\6\0"+
    "\1\3\257\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[697];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0113\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0974\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b"+
    "\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923"+
    "\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93"+
    "\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b"+
    "\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003"+
    "\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb"+
    "\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373"+
    "\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b"+
    "\0\u2562\0\u2599\0\u25d0\0\u2607\0\u1c5c\0\u263e\0\u2675\0\u26ac"+
    "\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864"+
    "\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c"+
    "\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4"+
    "\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c"+
    "\0\u2dc3\0\u2dfa\0\u2e31\0\u2c0b\0\u2c42\0\u2e68\0\u2e9f\0\u2ed6"+
    "\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e"+
    "\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f\0\u3246"+
    "\0\u327d\0\u32b4\0\u2e68\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7"+
    "\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f"+
    "\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u2418\0\u36c9\0\u3700"+
    "\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8"+
    "\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39\0\u3a70"+
    "\0\u3aa7\0\u3ade\0\u3b15\0\u31d8\0\u3b4c\0\u3b83\0\u2fb2\0\u3548"+
    "\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3b4c\0\u3c96\0\u3b83\0\u3ccd"+
    "\0\u3d04\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85"+
    "\0\u3ebc\0\u3ef3\0\u3f2a\0\u2ce7\0\u3f61\0\u3f98\0\u3fcf\0\u4006"+
    "\0\u403d\0\u4074\0\u40ab\0\u3246\0\u40e2\0\u4119\0\u4150\0\u4187"+
    "\0\u41be\0\u41f5\0\u422c\0\u13fb\0\u4263\0\u429a\0\u42d1\0\u4308"+
    "\0\u17d9\0\u433f\0\u4376\0\u43ad\0\u43e4\0\u441b\0\u4452\0\u4489"+
    "\0\u3c28\0\u3c5f\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c\0\u45d3"+
    "\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754\0\u478b"+
    "\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943"+
    "\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb"+
    "\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45\0\u4c7c\0\u4cb3"+
    "\0\u4cea\0\u4d21\0\u489e\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd\0\u4e34"+
    "\0\u4e6b\0\u4ea2\0\u4ed9\0\u4f10\0\u4f47\0\u4f7e\0\u4fb5\0\u4fec"+
    "\0\u5023\0\u505a\0\u5091\0\u50c8\0\u50ff\0\u5136\0\u516d\0\u51a4"+
    "\0\u51db\0\u5212\0\u5249\0\u5280\0\u52b7\0\u52ee\0\u5325\0\u535c"+
    "\0\u5393\0\u53ca\0\u5401\0\u5438\0\u546f\0\u54a6\0\u54dd\0\u5514"+
    "\0\u554b\0\u5582\0\u55b9\0\u55f0\0\u5627\0\u565e\0\u5695\0\u56cc"+
    "\0\u5703\0\u573a\0\u5771\0\u57a8\0\u57df\0\u5816\0\u584d\0\u5884"+
    "\0\u58bb\0\u58f2\0\u5929\0\u5960\0\u5997\0\u59ce\0\u5a05\0\u5a3c"+
    "\0\u5a73\0\u5aaa\0\u5ae1\0\u5b18\0\u5b4f\0\u5b86\0\u5bbd\0\u5bf4"+
    "\0\u5c2b\0\u5c62\0\u5c99\0\u5cd0\0\u5d07\0\u5d3e\0\u5d75\0\u5dac"+
    "\0\u5de3\0\u5e1a\0\u5e51\0\u5e88\0\u5ebf\0\u5ef6\0\u5f2d\0\u5f64"+
    "\0\u5f9b\0\u5fd2\0\u6009\0\u6040\0\u6077\0\u60ae\0\u60e5\0\u611c"+
    "\0\u6153\0\u618a\0\u61c1\0\u61f8\0\u622f\0\u6266\0\u629d\0\u62d4"+
    "\0\u630b\0\u6342\0\u6379\0\u63b0\0\u63e7\0\u641e\0\u6455\0\u648c"+
    "\0\u64c3\0\u64fa\0\u6531\0\u6568\0\u659f\0\u65d6\0\u660d\0\u6644"+
    "\0\u667b\0\u66b2\0\u66e9\0\u6720\0\u6757\0\u678e\0\u67c5\0\u67fc"+
    "\0\u6833\0\u686a\0\u68a1\0\u68d8\0\u690f\0\u6946\0\u697d\0\u69b4"+
    "\0\u69eb\0\u6a22\0\u6a59\0\u6a90\0\u6ac7\0\u6afe\0\u6b35\0\u6b6c"+
    "\0\u6ba3\0\u6bda\0\u6c11\0\u6c48\0\u6c7f\0\u6cb6\0\u6ced\0\u6d24"+
    "\0\u6d5b\0\u6d92\0\u6dc9\0\u6e00\0\u6e37\0\u6e6e\0\u6ea5\0\u6edc"+
    "\0\u6f13\0\u6f4a\0\u6f81\0\u6fb8\0\u6fef\0\u7026\0\u705d\0\u7094"+
    "\0\u70cb\0\u7102\0\u7139\0\u7170\0\u71a7\0\u71de\0\u7215\0\u724c"+
    "\0\u7283\0\u72ba\0\u72f1\0\u7328\0\u735f\0\u7396\0\u73cd\0\u7404"+
    "\0\u743b\0\u7472\0\u74a9\0\u74e0\0\u7517\0\u754e\0\u7585\0\u75bc"+
    "\0\u75f3\0\u762a\0\u7661\0\u7698\0\u76cf\0\u7706\0\u773d\0\u7774"+
    "\0\u77ab\0\u77e2\0\u7819\0\u7850\0\u7887\0\u78be\0\u78f5\0\u792c"+
    "\0\u7963\0\u799a\0\u79d1\0\u7a08\0\u7a3f\0\u7a76\0\u7aad\0\u7ae4"+
    "\0\u7b1b\0\u7b52\0\u7b89\0\u7bc0\0\u7bf7\0\u7c2e\0\u7c65\0\u7c9c"+
    "\0\u7cd3\0\u7d0a\0\u7d41\0\u7d78\0\u7daf\0\u7de6\0\u7e1d\0\u7e54"+
    "\0\u7e8b\0\u7ec2\0\u7ef9\0\u7f30\0\u7f67\0\u7f9e\0\u7fd5\0\u800c"+
    "\0\u8043\0\u807a\0\u80b1\0\u80e8\0\u811f\0\u8156\0\u818d\0\u81c4"+
    "\0\u81fb\0\u8232\0\u8269\0\u82a0\0\u82d7\0\u830e\0\u8345\0\u837c"+
    "\0\u83b3\0\u83ea\0\u8421\0\u8458\0\u848f\0\u84c6\0\u84fd\0\u8534"+
    "\0\u856b\0\u85a2\0\u85d9\0\u8610\0\u8647\0\u867e\0\u86b5\0\u86ec"+
    "\0\u8723\0\u875a\0\u8791\0\u87c8\0\u87ff\0\u8836\0\u886d\0\u88a4"+
    "\0\u88db\0\u8912\0\u8949\0\u8980\0\u89b7\0\u89ee\0\u8a25\0\u8a5c"+
    "\0\u8a93\0\u8aca\0\u8b01\0\u8b38\0\u8b6f\0\u8ba6\0\u8bdd\0\u8c14"+
    "\0\u8c4b\0\u8c82\0\u8cb9\0\u8cf0\0\u8d27\0\u8d5e\0\u8d95\0\u8dcc"+
    "\0\u8e03\0\u8e3a\0\u8e71\0\u8ea8\0\u8edf\0\u8f16\0\u8f4d\0\u8f84"+
    "\0\u8fbb\0\u8ff2\0\u9029\0\u9060\0\u9097\0\u90ce\0\u9105\0\u913c"+
    "\0\u9173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[697];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\3\2\1\4\7\2\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\4\2\1\41\1\42\2\43\1\44\1\45"+
    "\1\46\1\42\70\0\2\3\54\0\1\3\1\0\2\3"+
    "\33\0\1\47\101\0\1\50\2\0\1\51\34\0\1\52"+
    "\3\0\1\53\70\0\1\54\1\55\3\56\1\57\1\60"+
    "\1\61\3\56\1\62\1\61\1\63\3\56\1\64\2\61"+
    "\6\56\4\0\1\56\4\0\1\2\23\0\1\56\1\65"+
    "\2\56\1\66\11\56\1\67\5\56\1\70\3\56\1\61"+
    "\1\56\4\0\1\56\30\0\1\71\1\56\1\72\4\56"+
    "\1\73\6\56\1\74\13\56\4\0\1\56\30\0\3\56"+
    "\1\75\4\56\1\76\5\56\1\77\5\56\1\100\5\56"+
    "\4\0\1\56\3\0\1\101\24\0\1\102\3\56\1\103"+
    "\6\56\1\104\7\56\1\105\1\56\1\106\4\56\4\0"+
    "\1\106\30\0\4\56\1\107\1\110\2\56\1\111\5\56"+
    "\1\112\2\56\1\113\1\56\1\114\1\115\5\56\4\0"+
    "\1\56\3\0\1\116\24\0\4\56\1\70\1\56\1\117"+
    "\23\56\4\0\1\56\30\0\1\120\3\56\1\121\2\56"+
    "\1\122\1\123\5\56\1\124\4\56\1\125\6\56\4\0"+
    "\1\56\3\0\1\126\12\0\1\127\11\0\5\56\1\61"+
    "\2\56\1\130\3\56\1\61\1\131\4\56\1\132\1\133"+
    "\1\56\1\134\4\56\4\0\1\134\3\0\1\135\1\136"+
    "\23\0\1\54\10\56\1\137\12\56\1\140\5\56\4\0"+
    "\1\56\30\0\12\56\1\141\2\56\1\142\14\56\4\0"+
    "\1\56\5\0\1\143\22\0\1\57\3\56\1\144\3\56"+
    "\1\145\2\56\1\146\2\56\1\147\13\56\4\0\1\56"+
    "\3\0\1\150\24\0\1\151\3\56\1\61\7\56\1\152"+
    "\1\56\1\153\5\56\1\154\3\56\1\155\1\56\4\0"+
    "\1\56\30\0\4\56\1\156\10\56\1\157\1\160\13\56"+
    "\4\0\1\56\30\0\1\56\1\161\3\56\1\162\1\56"+
    "\1\61\2\56\1\61\2\56\1\163\1\164\2\56\1\61"+
    "\1\56\1\165\1\166\1\167\1\170\3\56\4\0\1\167"+
    "\5\0\1\2\22\0\17\56\1\171\4\56\1\70\5\56"+
    "\4\0\1\56\30\0\20\56\1\172\3\56\1\173\5\56"+
    "\4\0\1\56\30\0\4\56\1\174\14\56\1\175\10\56"+
    "\4\0\1\56\30\0\1\176\3\56\1\177\2\56\1\200"+
    "\1\201\5\56\1\202\3\56\1\203\1\56\1\102\5\56"+
    "\4\0\1\56\3\0\1\204\1\205\23\0\7\56\1\206"+
    "\6\56\1\207\2\56\1\210\1\56\1\211\2\56\1\212"+
    "\3\56\4\0\1\56\30\0\15\56\1\213\1\56\1\61"+
    "\2\56\1\214\1\56\1\215\5\56\4\0\1\56\4\0"+
    "\1\216\23\0\4\56\1\217\20\56\1\220\4\56\4\0"+
    "\1\220\30\0\1\221\3\56\1\222\2\56\1\223\1\224"+
    "\5\56\1\225\7\56\1\226\3\56\4\0\1\56\3\0"+
    "\1\227\24\0\27\56\1\36\2\56\4\0\1\56\30\0"+
    "\1\230\3\56\1\231\11\56\1\232\11\56\1\233\1\56"+
    "\4\0\1\56\30\0\31\56\1\40\4\0\1\56\10\0"+
    "\2\3\16\0\4\56\1\217\20\56\1\220\4\56\4\0"+
    "\1\234\1\0\2\3\64\0\7\42\1\0\2\3\54\0"+
    "\1\3\1\42\2\43\4\42\7\0\1\127\16\0\1\2"+
    "\2\0\1\135\3\0\1\2\1\235\4\0\1\136\1\236"+
    "\1\0\1\237\10\0\1\237\3\42\1\240\1\241\2\42"+
    "\21\0\1\242\3\0\1\243\2\0\1\244\1\204\5\0"+
    "\1\245\3\0\1\205\1\0\1\246\12\0\3\42\1\247"+
    "\1\250\2\42\33\0\1\143\2\0\1\251\21\0\5\42"+
    "\1\252\1\42\44\0\1\2\40\0\1\253\66\0\1\254"+
    "\51\0\2\255\10\0\1\256\3\0\1\257\37\0\1\255"+
    "\1\260\2\261\4\260\21\0\1\54\31\56\4\0\1\56"+
    "\30\0\16\56\1\262\13\56\4\0\1\56\30\0\32\56"+
    "\4\0\1\56\30\0\23\56\1\167\6\56\4\0\1\56"+
    "\30\0\1\263\31\56\4\0\1\56\30\0\13\56\1\61"+
    "\1\264\5\56\1\265\7\56\4\0\1\56\4\0\1\266"+
    "\23\0\3\56\1\61\24\56\1\267\1\56\4\0\1\56"+
    "\30\0\4\56\1\132\25\56\4\0\1\56\30\0\1\56"+
    "\1\65\30\56\4\0\1\56\30\0\2\56\1\270\1\56"+
    "\1\170\1\271\2\56\1\272\2\56\1\273\7\56\1\274"+
    "\6\56\4\0\1\56\3\0\1\275\24\0\23\56\1\230"+
    "\6\56\4\0\1\56\30\0\23\56\1\61\6\56\4\0"+
    "\1\56\30\0\15\56\1\276\14\56\4\0\1\56\30\0"+
    "\2\56\1\72\27\56\4\0\1\56\30\0\1\277\31\56"+
    "\4\0\1\56\30\0\14\56\1\134\7\56\1\300\5\56"+
    "\4\0\1\56\30\0\3\56\1\75\26\56\4\0\1\56"+
    "\30\0\3\56\1\132\26\56\4\0\1\56\30\0\4\56"+
    "\1\221\3\56\1\272\4\56\1\301\10\56\1\170\3\56"+
    "\4\0\1\56\3\0\1\275\24\0\21\56\1\302\10\56"+
    "\4\0\1\56\33\0\1\136\63\0\2\56\1\230\27\56"+
    "\4\0\1\56\30\0\4\56\1\103\25\56\4\0\1\56"+
    "\30\0\22\56\1\134\7\56\4\0\1\56\4\0\1\237"+
    "\23\0\2\56\1\61\27\56\4\0\1\56\30\0\4\56"+
    "\1\170\25\56\4\0\1\56\30\0\26\56\1\61\3\56"+
    "\4\0\1\56\30\0\5\56\1\110\24\56\4\0\1\56"+
    "\30\0\13\56\1\303\16\56\4\0\1\56\30\0\13\56"+
    "\1\304\5\56\1\61\10\56\4\0\1\56\30\0\16\56"+
    "\1\305\13\56\4\0\1\56\30\0\17\56\1\306\12\56"+
    "\4\0\1\56\30\0\21\56\1\307\10\56\4\0\1\56"+
    "\43\0\1\310\53\0\6\56\1\117\23\56\4\0\1\56"+
    "\30\0\1\54\2\56\1\132\16\56\1\132\2\56\1\311"+
    "\4\56\4\0\1\311\4\0\1\136\11\0\1\312\11\0"+
    "\3\56\1\61\15\56\1\313\1\61\7\56\4\0\1\56"+
    "\4\0\1\2\23\0\7\56\1\122\22\56\4\0\1\56"+
    "\30\0\14\56\1\155\5\56\1\61\7\56\4\0\1\56"+
    "\4\0\1\2\23\0\26\56\1\314\3\56\4\0\1\56"+
    "\30\0\23\56\1\315\6\56\4\0\1\56\44\0\1\316"+
    "\5\0\1\2\20\0\1\2\26\0\1\2\7\0\1\317"+
    "\1\2\10\0\1\237\10\0\1\237\30\0\10\56\1\130"+
    "\21\56\4\0\1\56\3\0\1\135\24\0\23\56\1\265"+
    "\6\56\4\0\1\56\30\0\15\56\1\301\14\56\4\0"+
    "\1\56\16\0\1\320\11\0\22\56\1\321\7\56\4\0"+
    "\1\56\4\0\1\322\23\0\4\56\1\61\25\56\4\0"+
    "\1\56\40\0\1\135\31\0\1\135\41\0\1\323\51\0"+
    "\11\56\1\137\20\56\4\0\1\56\30\0\22\56\1\70"+
    "\7\56\4\0\1\56\4\0\1\47\23\0\12\56\1\141"+
    "\17\56\4\0\1\56\5\0\1\143\22\0\4\56\1\107"+
    "\11\56\1\324\13\56\4\0\1\56\42\0\1\143\31\0"+
    "\1\143\22\0\23\56\1\325\6\56\4\0\1\56\30\0"+
    "\12\56\1\326\17\56\4\0\1\56\5\0\1\327\22\0"+
    "\13\56\1\146\16\56\4\0\1\56\30\0\13\56\1\61"+
    "\16\56\4\0\1\56\42\0\1\327\31\0\1\327\22\0"+
    "\15\56\1\330\12\56\1\331\1\56\4\0\1\56\30\0"+
    "\14\56\1\152\15\56\4\0\1\56\30\0\21\56\1\134"+
    "\1\70\7\56\4\0\1\56\4\0\1\47\23\0\2\56"+
    "\1\230\17\56\1\332\7\56\4\0\1\56\4\0\1\333"+
    "\23\0\22\56\1\334\7\56\4\0\1\56\4\0\1\335"+
    "\23\0\4\56\1\336\25\56\4\0\1\56\30\0\15\56"+
    "\1\157\14\56\4\0\1\56\30\0\21\56\1\61\1\56"+
    "\1\61\6\56\4\0\1\56\30\0\25\56\1\337\4\56"+
    "\4\0\1\337\30\0\5\56\1\61\24\56\4\0\1\56"+
    "\30\0\2\56\1\134\10\56\1\330\16\56\4\0\1\56"+
    "\30\0\16\56\1\164\13\56\4\0\1\56\30\0\7\56"+
    "\1\167\22\56\4\0\1\56\30\0\6\56\1\340\12\56"+
    "\1\341\1\56\1\61\6\56\4\0\1\56\30\0\4\56"+
    "\1\342\25\56\4\0\1\56\30\0\15\56\1\61\14\56"+
    "\4\0\1\56\30\0\17\56\1\171\12\56\4\0\1\56"+
    "\30\0\20\56\1\172\11\56\4\0\1\56\30\0\16\56"+
    "\1\70\13\56\4\0\1\56\30\0\1\343\31\56\4\0"+
    "\1\56\30\0\21\56\1\175\10\56\4\0\1\56\30\0"+
    "\14\56\1\134\15\56\4\0\1\56\30\0\15\56\1\104"+
    "\14\56\4\0\1\56\30\0\1\344\3\56\1\345\11\56"+
    "\1\346\13\56\4\0\1\56\30\0\14\56\1\347\1\350"+
    "\14\56\4\0\1\56\30\0\14\56\1\351\15\56\4\0"+
    "\1\56\30\0\22\56\1\203\7\56\4\0\1\56\4\0"+
    "\1\205\37\0\1\352\1\353\73\0\1\205\20\0\1\205"+
    "\23\0\1\354\3\56\1\355\3\56\1\356\5\56\1\104"+
    "\2\56\1\357\10\56\4\0\1\56\3\0\1\360\24\0"+
    "\16\56\1\61\13\56\4\0\1\56\30\0\24\56\1\134"+
    "\3\56\1\61\1\56\4\0\1\56\30\0\23\56\1\211"+
    "\6\56\4\0\1\56\30\0\10\56\1\350\21\56\4\0"+
    "\1\56\3\0\1\353\24\0\3\56\1\167\7\56\1\361"+
    "\7\56\1\362\6\56\4\0\1\56\30\0\4\56\1\363"+
    "\25\56\4\0\1\56\30\0\24\56\1\215\5\56\4\0"+
    "\1\56\34\0\1\364\62\0\21\56\1\330\10\56\4\0"+
    "\1\56\30\0\25\56\1\220\4\56\4\0\1\220\30\0"+
    "\22\56\1\132\7\56\4\0\1\56\4\0\1\136\11\0"+
    "\1\365\11\0\3\56\1\61\15\56\1\64\3\56\1\134"+
    "\4\56\4\0\1\134\30\0\1\366\3\56\1\367\3\56"+
    "\1\370\5\56\1\371\11\56\1\314\1\56\4\0\1\56"+
    "\3\0\1\372\24\0\13\56\1\147\7\56\1\373\6\56"+
    "\4\0\1\56\30\0\15\56\1\301\6\56\1\300\5\56"+
    "\4\0\1\56\30\0\26\56\1\226\3\56\4\0\1\56"+
    "\43\0\1\317\7\0\1\374\43\0\7\56\1\61\22\56"+
    "\4\0\1\56\30\0\1\230\21\56\2\61\6\56\4\0"+
    "\1\56\4\0\1\2\23\0\24\56\1\375\5\56\4\0"+
    "\1\56\30\0\30\56\1\233\1\56\4\0\1\56\10\0"+
    "\2\3\16\0\25\56\1\220\4\56\4\0\1\234\1\0"+
    "\2\3\50\0\1\266\31\0\1\320\33\0\1\322\20\0"+
    "\1\322\27\0\1\2\72\0\1\135\26\0\3\42\1\240"+
    "\3\42\36\0\1\323\21\0\7\42\35\0\1\237\67\0"+
    "\1\376\51\0\1\377\3\0\1\u0100\11\0\1\u0101\64\0"+
    "\1\u0102\54\0\1\u0103\100\0\1\352\1\353\21\0\7\42"+
    "\43\0\1\205\14\0\4\42\1\250\2\42\25\0\1\u0104"+
    "\11\0\1\u0105\62\0\1\143\24\0\5\42\1\252\1\42"+
    "\14\0\1\u0106\4\0\32\u0106\3\0\2\u0106\23\0\1\u0107"+
    "\4\0\32\u0107\3\0\2\u0107\10\0\2\255\10\0\1\256"+
    "\3\0\1\u0108\37\0\1\255\1\0\2\255\17\0\1\u0109"+
    "\3\0\1\u010a\63\0\1\u010b\2\0\1\257\1\u010c\61\0"+
    "\1\256\3\0\1\u0108\40\0\7\260\1\0\2\255\10\0"+
    "\1\256\3\0\1\u0108\37\0\1\255\1\260\2\261\4\260"+
    "\21\0\24\56\1\70\1\134\4\56\4\0\1\134\30\0"+
    "\10\56\1\u010d\21\56\4\0\1\56\3\0\1\u010e\24\0"+
    "\16\56\1\140\13\56\4\0\1\56\46\0\1\2\50\0"+
    "\23\56\1\u010f\6\56\4\0\1\56\30\0\1\u0110\31\56"+
    "\4\0\1\56\30\0\16\56\1\u0111\13\56\4\0\1\56"+
    "\30\0\15\56\1\u0112\14\56\4\0\1\56\30\0\16\56"+
    "\1\107\13\56\4\0\1\56\30\0\26\56\1\u0113\3\56"+
    "\4\0\1\56\45\0\1\u0114\37\0\1\47\11\0\15\56"+
    "\1\173\5\56\1\61\6\56\4\0\1\56\30\0\15\56"+
    "\1\u0115\14\56\4\0\1\56\30\0\13\56\1\76\16\56"+
    "\4\0\1\56\16\0\1\47\11\0\23\56\1\61\6\56"+
    "\4\0\1\56\30\0\10\56\1\272\21\56\4\0\1\56"+
    "\3\0\1\275\24\0\4\56\1\306\25\56\4\0\1\56"+
    "\30\0\13\56\1\u0116\16\56\4\0\1\56\30\0\14\56"+
    "\1\61\15\56\4\0\1\56\27\0\1\u0117\32\56\4\0"+
    "\1\56\30\0\23\56\1\165\6\56\4\0\1\56\34\0"+
    "\1\u0118\62\0\4\56\1\132\3\56\1\272\21\56\4\0"+
    "\1\56\3\0\1\275\27\0\1\2\7\0\1\317\6\0"+
    "\1\2\20\0\1\2\23\0\4\56\1\314\15\56\1\321"+
    "\7\56\4\0\1\56\4\0\1\322\11\0\1\360\11\0"+
    "\22\56\1\61\7\56\4\0\1\56\4\0\1\2\23\0"+
    "\17\56\1\u0119\12\56\4\0\1\56\52\0\1\335\20\0"+
    "\1\335\36\0\1\2\66\0\1\317\6\0\1\2\20\0"+
    "\1\2\23\0\4\56\1\u011a\25\56\4\0\1\56\34\0"+
    "\1\u011b\50\0\1\47\34\0\1\2\43\0\26\56\1\u011c"+
    "\3\56\4\0\1\56\16\0\1\360\11\0\32\56\4\0"+
    "\1\56\30\0\4\56\1\u011d\25\56\4\0\1\56\34\0"+
    "\1\u011e\62\0\30\56\1\61\1\56\4\0\1\56\30\0"+
    "\1\56\1\134\30\56\4\0\1\56\30\0\23\56\1\u011f"+
    "\6\56\4\0\1\56\53\0\1\u0120\43\0\3\56\1\61"+
    "\26\56\4\0\1\56\30\0\10\56\1\u0121\21\56\4\0"+
    "\1\56\3\0\1\u0122\24\0\7\56\1\70\22\56\4\0"+
    "\1\56\30\0\22\56\1\u0123\7\56\4\0\1\56\4\0"+
    "\1\u0124\23\0\21\56\1\61\10\56\4\0\1\56\30\0"+
    "\13\56\1\u0125\16\56\4\0\1\56\30\0\15\56\1\u0126"+
    "\14\56\4\0\1\56\16\0\1\312\11\0\22\56\1\61"+
    "\7\56\4\0\1\56\4\0\1\2\23\0\24\56\1\300"+
    "\5\56\4\0\1\56\30\0\17\56\1\u0125\12\56\4\0"+
    "\1\56\30\0\2\56\1\134\27\56\4\0\1\56\30\0"+
    "\4\56\1\267\25\56\4\0\1\56\47\0\1\u0127\51\0"+
    "\1\237\64\0\15\56\1\61\5\56\1\314\6\56\4\0"+
    "\1\56\10\0\2\u0128\16\0\10\56\1\u0129\3\56\1\u012a"+
    "\1\61\3\56\1\u012b\1\134\5\56\1\u012c\1\56\4\0"+
    "\1\u012d\1\u012e\2\u012f\1\u0130\1\u0131\2\u012e\21\0\22\56"+
    "\1\61\7\56\4\0\1\56\4\0\1\2\23\0\16\56"+
    "\1\u0132\13\56\4\0\1\56\52\0\1\2\20\0\1\2"+
    "\23\0\4\56\1\u0133\25\56\4\0\1\56\30\0\10\56"+
    "\1\147\21\56\4\0\1\56\3\0\1\317\27\0\1\2"+
    "\66\0\1\2\7\0\1\317\5\0\1\237\3\0\1\237"+
    "\10\0\1\237\30\0\23\56\1\314\6\56\4\0\1\56"+
    "\30\0\15\56\1\u0134\3\56\1\u0135\10\56\4\0\1\56"+
    "\30\0\2\56\1\230\10\56\1\134\16\56\4\0\1\56"+
    "\16\0\1\360\11\0\14\56\1\61\5\56\1\61\7\56"+
    "\4\0\1\56\4\0\1\2\25\0\1\u0103\10\0\1\237"+
    "\53\0\7\56\1\u0136\22\56\4\0\1\56\37\0\1\u0137"+
    "\45\0\1\365\11\0\3\56\1\61\7\56\1\147\5\56"+
    "\1\u0138\3\56\1\134\4\56\4\0\1\134\52\0\1\237"+
    "\20\0\1\237\40\0\1\u0139\37\0\1\312\33\0\1\2"+
    "\20\0\1\2\47\0\1\u013a\46\0\1\u013b\71\0\1\2"+
    "\105\0\1\2\66\0\1\u013c\32\0\1\u013d\1\u0107\4\0"+
    "\32\u0107\3\0\2\u0107\26\0\1\u0108\1\u010c\61\0\1\u013e"+
    "\1\u013f\4\0\32\u013f\1\u0140\2\0\2\u013f\23\0\1\u0141"+
    "\2\0\1\u010a\66\0\1\u0142\66\0\1\u0143\70\0\15\56"+
    "\1\u0144\14\56\4\0\1\56\45\0\1\u0145\51\0\7\56"+
    "\1\302\22\56\4\0\1\56\30\0\24\56\1\104\5\56"+
    "\4\0\1\56\30\0\21\56\1\134\10\56\4\0\1\56"+
    "\30\0\6\56\1\61\23\56\4\0\1\56\30\0\4\56"+
    "\1\106\25\56\4\0\1\56\36\0\1\2\60\0\6\56"+
    "\1\u0146\23\56\4\0\1\56\30\0\16\56\1\u0147\13\56"+
    "\4\0\1\56\25\0\1\u0148\70\0\1\u0117\66\0\1\u0117"+
    "\22\56\1\306\7\56\4\0\1\56\4\0\1\u0118\23\0"+
    "\13\56\1\u0149\16\56\4\0\1\56\43\0\1\u014a\53\0"+
    "\13\56\1\330\16\56\4\0\1\56\43\0\1\u014b\53\0"+
    "\16\56\1\u014c\13\56\4\0\1\56\46\0\1\u014d\50\0"+
    "\4\56\1\u014e\25\56\4\0\1\56\34\0\1\u014f\50\0"+
    "\1\47\11\0\32\56\4\0\1\56\10\0\2\u0128\17\0"+
    "\1\u0150\34\0\1\u0128\1\0\2\u0128\25\0\21\56\1\u011c"+
    "\10\56\4\0\1\56\30\0\22\56\1\u0151\7\56\4\0"+
    "\1\56\4\0\1\u0152\23\0\4\56\1\314\25\56\4\0"+
    "\1\56\16\0\1\365\11\0\3\56\1\61\7\56\1\147"+
    "\5\56\1\134\3\56\1\134\4\56\4\0\1\134\10\0"+
    "\2\u0128\16\0\1\56\1\u0153\30\56\4\0\1\u012d\1\0"+
    "\2\u0128\26\0\1\u0150\35\0\7\u012e\1\0\2\u0128\17\0"+
    "\1\u0150\34\0\1\u0128\1\u012e\2\u012f\4\u012e\22\0\1\u0150"+
    "\17\0\1\u013c\15\0\7\u012e\22\0\1\u0150\2\0\1\2"+
    "\32\0\7\u012e\21\0\24\56\1\u0154\5\56\4\0\1\56"+
    "\30\0\22\56\1\356\7\56\4\0\1\56\4\0\1\360"+
    "\23\0\4\56\1\u0134\25\56\4\0\1\56\30\0\10\56"+
    "\1\170\5\56\1\u0155\13\56\4\0\1\56\3\0\1\u0156"+
    "\34\0\1\u0156\5\0\1\u0157\23\0\1\u0156\24\0\4\56"+
    "\1\61\15\56\1\u0158\7\56\4\0\1\56\4\0\1\u0159"+
    "\11\0\1\47\113\0\1\101\76\0\1\u015a\23\0\2\u015b"+
    "\54\0\1\u015b\1\u015c\2\u015d\4\u015c\13\0\1\u015e\1\u013e"+
    "\4\0\32\u013e\3\0\2\u013e\22\0\1\u013e\1\u013f\4\0"+
    "\32\u013f\3\0\2\u013f\33\0\1\u015f\61\0\1\u0160\63\0"+
    "\1\u0161\2\0\1\u0142\66\0\1\u0143\1\u0162\111\0\1\47"+
    "\20\0\1\47\23\0\4\56\1\u0163\25\56\4\0\1\56"+
    "\30\0\26\56\1\u0164\3\56\4\0\1\56\25\0\1\u0165"+
    "\76\0\1\2\111\0\1\2\36\0\24\56\1\u0166\5\56"+
    "\4\0\1\56\54\0\1\u0167\42\0\13\56\1\u0168\16\56"+
    "\4\0\1\56\43\0\1\u0169\63\0\1\u016a\31\0\1\u016a"+
    "\24\0\10\56\1\u016b\21\56\4\0\1\56\3\0\1\u016a"+
    "\24\0\6\56\1\230\23\56\4\0\1\56\30\0\24\56"+
    "\1\70\5\56\4\0\1\56\45\0\1\2\75\0\1\47"+
    "\42\0\4\56\1\u016c\25\56\4\0\1\56\34\0\1\u016d"+
    "\71\0\1\u016e\37\0\2\u015b\11\0\1\u016f\4\0\36\u016f"+
    "\1\u0170\1\0\2\u015b\20\0\1\u016f\4\0\37\u016f\7\u015c"+
    "\1\0\2\u015b\11\0\1\u016f\4\0\36\u016f\1\u0170\1\u015c"+
    "\2\u015d\4\u015c\13\0\1\u0171\3\0\1\u015e\74\0\1\u0172"+
    "\55\0\1\u0173\2\0\1\u0160\66\0\1\u0174\66\0\1\u0175"+
    "\70\0\23\56\1\u0176\6\56\4\0\1\56\10\0\2\u0177"+
    "\16\0\32\56\4\0\1\u0178\1\u0179\2\u017a\4\u0179\3\0"+
    "\1\u0165\1\u017b\1\0\1\u017b\4\0\1\u0165\1\u017b\1\u0165"+
    "\2\u017b\1\u0165\32\u017b\3\0\2\u017b\30\0\22\56\1\u011d"+
    "\7\56\4\0\1\56\4\0\1\u011e\45\0\1\u011e\20\0"+
    "\1\u011e\23\0\25\56\1\u017c\4\56\4\0\1\u017c\55\0"+
    "\1\u017d\10\0\1\u017d\53\0\1\u017e\43\0\23\56\1\u017f"+
    "\6\56\4\0\1\56\30\0\13\56\1\u0180\16\56\4\0"+
    "\1\56\43\0\1\u0181\63\0\1\275\31\0\1\275\4\0"+
    "\2\u0182\11\0\1\u016f\4\0\36\u016f\1\u0183\1\u0184\2\u0185"+
    "\4\u0184\1\0\2\u0186\11\0\1\u016f\4\0\36\u016f\1\u0187"+
    "\1\u0184\2\u0187\4\u0184\14\0\1\u0188\2\0\1\u0189\103\0"+
    "\1\u018a\51\0\1\u018b\50\0\2\255\10\0\1\256\3\0"+
    "\1\u018c\37\0\1\255\1\260\2\261\4\260\13\0\1\256"+
    "\3\0\1\u0175\70\0\10\56\1\u018d\21\56\4\0\1\56"+
    "\3\0\1\u018e\4\0\2\u0177\32\0\1\u018f\21\0\1\u0177"+
    "\1\0\2\u0177\5\0\2\u0177\16\0\14\56\1\u0190\15\56"+
    "\4\0\1\u0178\1\0\2\u0177\41\0\1\u018f\22\0\7\u0179"+
    "\1\0\2\u0177\32\0\1\u018f\21\0\1\u0177\1\u0179\2\u017a"+
    "\4\u0179\21\0\4\56\1\356\25\56\4\0\1\56\34\0"+
    "\1\360\64\0\1\u0191\64\0\2\56\1\u0192\27\56\4\0"+
    "\1\56\30\0\5\56\1\61\17\56\1\u017c\4\56\4\0"+
    "\1\u017c\35\0\1\2\17\0\1\u017d\10\0\1\u017d\10\0"+
    "\2\u0182\44\0\1\u0193\7\0\1\u0182\1\0\2\u0182\5\0"+
    "\2\u0182\11\0\1\u016f\4\0\26\u016f\1\u0194\7\u016f\1\u0183"+
    "\1\u0184\2\u0185\4\u0184\47\0\1\u0193\10\0\7\u0184\1\0"+
    "\2\u0182\44\0\1\u0193\7\0\1\u0182\1\u0184\2\u0185\4\u0184"+
    "\1\0\2\u0186\11\0\1\u016f\4\0\26\u016f\1\u0194\7\u016f"+
    "\1\u0187\1\0\2\u0186\5\0\2\u0186\11\0\1\u016f\4\0"+
    "\26\u016f\1\u0194\7\u016f\1\u0187\1\u0184\2\u0187\4\u0184\17\0"+
    "\1\u0189\64\0\1\u0195\1\0\1\u0189\74\0\1\u0196\54\0"+
    "\1\u0109\3\0\1\u018b\50\0\2\255\10\0\1\256\3\0"+
    "\1\u018c\1\u010c\36\0\1\255\1\260\2\261\4\260\21\0"+
    "\17\56\1\u0197\12\56\4\0\1\56\47\0\1\u0198\53\0"+
    "\1\u0199\62\0\4\56\1\u019a\25\56\4\0\1\56\46\0"+
    "\1\u019b\50\0\16\56\1\u019c\13\56\4\0\1\56\30\0"+
    "\1\u019d\46\0\2\u0182\11\0\1\u016f\4\0\1\u019e\35\u016f"+
    "\1\u0183\1\u0184\2\u0185\4\u0184\13\0\1\u019f\3\0\1\u0195"+
    "\113\0\1\u01a0\23\0\2\u01a1\16\0\32\56\4\0\1\u01a2"+
    "\1\u01a3\2\u01a4\4\u01a3\1\0\2\u01a1\54\0\1\u01a1\1\u01a3"+
    "\2\u01a4\4\u01a3\1\0\2\u01a5\54\0\1\u01a5\1\u01a6\2\u01a7"+
    "\4\u01a6\1\0\2\u01a5\16\0\32\56\4\0\1\u01a8\1\u01a6"+
    "\2\u01a7\4\u01a6\31\0\1\u01a9\31\0\1\u01a9\24\0\10\56"+
    "\1\u01aa\21\56\4\0\1\56\3\0\1\u01a9\41\0\1\u01ab"+
    "\31\0\2\u0182\11\0\1\u016f\4\0\15\u016f\1\u01ac\20\u016f"+
    "\1\u0183\1\u0184\2\u0185\4\u0184\13\0\1\2\3\0\1\u019f"+
    "\74\0\1\u01ad\42\0\2\u01a1\26\0\1\u01ae\14\0\1\u01af"+
    "\10\0\1\u01b0\1\0\2\u01a1\1\u01ae\4\0\2\u01a1\16\0"+
    "\10\56\1\u01b1\14\56\1\u01b2\4\56\4\0\1\u01b3\1\0"+
    "\2\u01a1\1\u01ae\34\0\1\u01ae\14\0\1\u01af\10\0\1\u01af"+
    "\3\u01a3\1\u01b4\3\u01a3\1\0\2\u01a1\26\0\1\u01ae\14\0"+
    "\1\u01af\10\0\1\u01b0\1\u01a3\2\u01a4\1\u01b4\3\u01a3\1\0"+
    "\2\u01a5\41\0\1\u01b5\12\0\1\u01a5\1\0\2\u01a5\50\0"+
    "\1\u01b5\13\0\7\u01a6\1\0\2\u01a5\41\0\1\u01b5\12\0"+
    "\1\u01a5\1\u01a6\2\u01a7\4\u01a6\1\0\2\u01a5\16\0\23\56"+
    "\1\u01b6\6\56\4\0\1\u01a8\1\0\2\u01a5\42\0\1\u01b7"+
    "\51\0\15\56\1\u01b8\14\56\4\0\1\56\53\0\1\u01b9"+
    "\23\0\2\u0182\11\0\1\u016f\4\0\23\u016f\1\u01ba\12\u016f"+
    "\1\u0183\1\u0184\2\u0185\4\u0184\24\0\1\u01bb\100\0\1\u01bc"+
    "\61\0\1\u01bd\31\0\1\u01bd\4\0\2\u01a1\26\0\1\u01be"+
    "\14\0\1\u01af\10\0\1\u01b0\1\0\2\u01a1\1\u01be\24\0"+
    "\15\56\1\u01bf\14\56\4\0\1\56\30\0\10\56\1\u01c0"+
    "\21\56\4\0\1\56\3\0\1\u01bd\4\0\2\u01a1\16\0"+
    "\10\56\1\u01c1\14\56\1\u01b2\4\56\4\0\1\u01b3\1\0"+
    "\2\u01a1\1\u01be\34\0\1\u01ae\4\0\1\u01bc\7\0\1\u01af"+
    "\10\0\1\u01af\3\u01a3\1\u01b4\3\u01a3\37\0\1\u01c2\50\0"+
    "\16\56\1\u01c3\13\56\4\0\1\56\10\0\2\u01c4\54\0"+
    "\1\u01c4\1\u01c5\2\u01c6\4\u01c5\1\0\2\u01c4\16\0\32\56"+
    "\4\0\1\u01c7\1\u01c5\2\u01c6\4\u01c5\43\0\1\u01c8\20\0"+
    "\1\u01c8\3\0\2\u0182\11\0\1\u016f\4\0\22\u016f\1\u01c9"+
    "\13\u016f\1\u0183\1\u0184\2\u0185\1\u0184\1\u01ca\2\u0184\55\0"+
    "\1\u01cb\37\0\1\266\64\0\1\u01cc\66\0\1\u01cc\11\0"+
    "\1\u01bc\51\0\5\56\1\265\24\56\4\0\1\56\30\0"+
    "\3\56\1\u01cd\26\56\4\0\1\56\30\0\3\56\1\u01cd"+
    "\11\56\1\u01bf\14\56\4\0\1\56\10\0\2\u01ce\54\0"+
    "\1\u01ce\1\u01cf\2\u01d0\4\u01cf\1\0\2\u01ce\16\0\32\56"+
    "\4\0\1\u01d1\1\u01cf\2\u01d0\4\u01cf\1\0\2\u01c4\41\0"+
    "\1\u01d2\12\0\1\u01c4\1\0\2\u01c4\50\0\1\u01d2\13\0"+
    "\7\u01c5\1\0\2\u01c4\41\0\1\u01d2\12\0\1\u01c4\1\u01c5"+
    "\2\u01c6\4\u01c5\1\0\2\u01c4\16\0\23\56\1\u01d3\6\56"+
    "\4\0\1\u01c7\1\0\2\u01c4\5\0\2\u01d4\54\0\1\u01d4"+
    "\1\u01d5\2\u01d6\4\u01d5\1\0\2\u01d7\11\0\1\u016f\4\0"+
    "\36\u016f\1\u01d8\1\u01d9\2\u01da\4\u01d9\1\0\2\u01d4\44\0"+
    "\1\u0193\7\0\1\u01d4\1\u01d9\2\u01db\4\u01d9\13\0\1\u013e"+
    "\100\0\1\266\62\0\4\56\1\265\25\56\4\0\1\56"+
    "\10\0\2\u01ce\7\0\1\u01dc\44\0\1\u01ce\1\0\2\u01ce"+
    "\16\0\1\u01dc\45\0\7\u01cf\1\0\2\u01ce\7\0\1\u01dc"+
    "\44\0\1\u01ce\1\u01cf\2\u01d0\4\u01cf\1\0\2\u01ce\7\0"+
    "\1\u01dc\6\0\32\56\4\0\1\u01d1\1\0\2\u01ce\35\0"+
    "\1\u01dd\31\0\1\u01dd\24\0\10\56\1\u01de\21\56\4\0"+
    "\1\56\3\0\1\u01dd\4\0\2\u01d4\41\0\1\u01df\12\0"+
    "\1\u01d4\1\0\2\u01d4\50\0\1\u01df\13\0\7\u01d5\1\0"+
    "\2\u01d4\41\0\1\u01df\12\0\1\u01d4\1\u01d5\2\u01d6\4\u01d5"+
    "\1\0\2\u01d7\41\0\1\u01df\2\0\1\u0193\7\0\1\u01d7"+
    "\1\0\2\u01d7\5\0\2\u01d7\11\0\1\u016f\4\0\23\u016f"+
    "\1\u01e0\2\u016f\1\u0194\7\u016f\1\u01d8\1\u0184\2\u01e1\4\u0184"+
    "\44\0\1\u01df\2\0\1\u0193\10\0\7\u01d9\1\0\2\u01d7"+
    "\41\0\1\u01df\2\0\1\u0193\7\0\1\u01d7\1\u01d9\2\u01da"+
    "\4\u01d9\1\0\2\u01d4\41\0\1\u01df\2\0\1\u0193\7\0"+
    "\1\u01d4\1\u01d9\2\u01db\4\u01d9\12\0\1\u01e2\114\0\1\u01e3"+
    "\47\0\17\56\1\u01e4\12\56\4\0\1\56\46\0\1\u01e5"+
    "\30\0\2\u0182\11\0\1\u016f\4\0\16\u016f\1\u01e6\17\u016f"+
    "\1\u0183\1\u0184\2\u0185\4\u0184\1\0\2\u01d7\41\0\1\u01df"+
    "\2\0\1\u0193\7\0\1\u01d7\1\u0184\2\u01e1\4\u0184\53\0"+
    "\1\u01e7\14\0\2\u01e8\54\0\1\u01e8\1\u01e9\2\u01ea\4\u01e9"+
    "\1\0\2\u01e8\16\0\32\56\4\0\1\u01eb\1\u01e9\2\u01ea"+
    "\4\u01e9\1\0\2\u01ec\54\0\1\u01ec\1\u01ed\2\u01ee\4\u01ed"+
    "\1\0\2\u01ef\11\0\1\u016f\4\0\36\u016f\1\u01f0\1\u01f1"+
    "\2\u01f2\4\u01f1\23\0\1\u01f3\44\0\2\u01e8\23\0\1\u01f4"+
    "\30\0\1\u01e8\1\0\2\u01e8\32\0\1\u01f4\31\0\7\u01e9"+
    "\1\0\2\u01e8\23\0\1\u01f4\30\0\1\u01e8\1\u01e9\2\u01ea"+
    "\4\u01e9\1\0\2\u01e8\16\0\5\56\1\u01f5\24\56\4\0"+
    "\1\u01eb\1\0\2\u01e8\5\0\2\u01ec\40\0\1\u01f6\13\0"+
    "\1\u01ec\1\0\2\u01ec\1\0\1\u01f6\45\0\1\u01f6\14\0"+
    "\4\u01ed\1\u01f7\2\u01ed\1\0\2\u01ec\40\0\1\u01f6\13\0"+
    "\1\u01ec\1\u01ed\2\u01ee\1\u01ed\1\u01f7\2\u01ed\1\0\2\u01ef"+
    "\40\0\1\u01f6\3\0\1\u0193\7\0\1\u01ef\1\0\2\u01ef"+
    "\1\0\1\u01f6\3\0\2\u01ef\11\0\1\u016f\4\0\22\u016f"+
    "\1\u01f8\3\u016f\1\u0194\7\u016f\1\u01f0\1\u0184\2\u01f9\1\u0184"+
    "\1\u01fa\2\u0184\43\0\1\u01f6\3\0\1\u0193\10\0\4\u01f1"+
    "\1\u01fb\2\u01f1\1\0\2\u01ef\40\0\1\u01f6\3\0\1\u0193"+
    "\7\0\1\u01ef\1\u01f1\2\u01f2\1\u01f1\1\u01fb\2\u01f1\37\0"+
    "\1\u01fc\66\0\1\u01fd\50\0\16\56\1\u01fe\13\56\4\0"+
    "\1\56\34\0\1\u01ff\66\0\1\u01ff\15\0\1\u01f6\14\0"+
    "\4\u01ed\1\u01f7\2\u01ed\1\0\2\u0182\11\0\1\u016f\4\0"+
    "\4\u016f\1\u0200\31\u016f\1\u0183\1\u0184\2\u0185\4\u0184\1\0"+
    "\2\u01ef\40\0\1\u01f6\3\0\1\u0193\7\0\1\u01ef\1\u0184"+
    "\2\u01f9\1\u0184\1\u01fa\2\u0184\25\0\1\u01ff\21\0\1\u0193"+
    "\10\0\7\u0184\25\0\1\u01ff\15\0\1\u01f6\3\0\1\u0193"+
    "\10\0\4\u01f1\1\u01fb\2\u01f1\34\0\1\u0201\74\0\1\u0202"+
    "\45\0\21\56\1\u0203\10\56\4\0\1\56\45\0\1\u0204"+
    "\31\0\2\u0182\11\0\1\u016f\4\0\15\u016f\1\u0205\20\u016f"+
    "\1\u0183\1\u0184\2\u0185\4\u0184\34\0\1\u0206\33\0\2\u0207"+
    "\54\0\1\u0207\1\u0208\2\u0209\4\u0208\1\0\2\u0207\16\0"+
    "\32\56\4\0\1\u020a\1\u0208\2\u0209\4\u0208\24\0\1\u020b"+
    "\43\0\2\u0182\11\0\1\u016f\4\0\3\u016f\1\u020c\32\u016f"+
    "\1\u0183\1\u0184\2\u0185\4\u0184\25\0\1\u020d\42\0\2\u0207"+
    "\14\0\1\u020e\37\0\1\u0207\1\0\2\u0207\23\0\1\u020e"+
    "\40\0\7\u0208\1\0\2\u0207\14\0\1\u020e\37\0\1\u0207"+
    "\1\u0208\2\u0209\4\u0208\1\0\2\u0207\14\0\1\u020e\1\0"+
    "\32\56\4\0\1\u020a\1\0\2\u0207\5\0\2\u020f\54\0"+
    "\1\u020f\1\u0210\2\u0211\4\u0210\1\0\2\u0212\11\0\1\u016f"+
    "\4\0\36\u016f\1\u0213\1\u0214\2\u0215\4\u0214\23\0\1\u0216"+
    "\44\0\2\u0217\14\0\1\u020e\37\0\1\u0217\1\u0218\2\u0219"+
    "\4\u0218\1\0\2\u020f\46\0\1\u021a\5\0\1\u020f\1\0"+
    "\2\u020f\55\0\1\u021a\6\0\7\u0210\1\0\2\u020f\46\0"+
    "\1\u021a\5\0\1\u020f\1\u0210\2\u0211\4\u0210\1\0\2\u0212"+
    "\44\0\1\u0193\1\0\1\u021a\5\0\1\u0212\1\0\2\u0212"+
    "\5\0\2\u0212\11\0\1\u016f\4\0\26\u016f\1\u0194\1\u016f"+
    "\1\u021b\5\u016f\1\u0213\1\u0184\2\u021c\4\u0184\47\0\1\u0193"+
    "\1\0\1\u021a\6\0\7\u0214\1\0\2\u0212\44\0\1\u0193"+
    "\1\0\1\u021a\5\0\1\u0212\1\u0214\2\u0215\4\u0214\44\0"+
    "\1\u021d\23\0\2\u0217\17\0\1\u021e\34\0\1\u0217\1\0"+
    "\2\u0217\26\0\1\u021e\35\0\7\u0218\1\0\2\u0217\17\0"+
    "\1\u021e\34\0\1\u0217\1\u0218\2\u0219\4\u0218\37\0\1\u021f"+
    "\30\0\2\u0182\11\0\1\u016f\4\0\16\u016f\1\u0220\17\u016f"+
    "\1\u0183\1\u0184\2\u0185\4\u0184\1\0\2\u0212\44\0\1\u0193"+
    "\1\0\1\u021a\5\0\1\u0212\1\u0184\2\u021c\4\u0184\1\0"+
    "\2\u0221\54\0\1\u0221\1\u0222\2\u0223\4\u0222\31\0\1\u0224"+
    "\31\0\1\u0224\50\0\1\u0225\22\0\2\u0182\11\0\1\u016f"+
    "\4\0\24\u016f\1\u0226\11\u016f\1\u0183\1\u0184\2\u0185\4\u0184"+
    "\1\0\2\u0221\26\0\1\u0227\25\0\1\u0221\1\0\2\u0221"+
    "\1\u0227\34\0\1\u0227\26\0\3\u0222\1\u0228\3\u0222\1\0"+
    "\2\u0221\26\0\1\u0227\25\0\1\u0221\1\u0222\2\u0223\1\u0228"+
    "\3\u0222\44\0\1\u0229\23\0\2\u022a\54\0\1\u022a\1\u022b"+
    "\2\u022c\4\u022b\1\0\2\u022d\11\0\1\u016f\4\0\36\u016f"+
    "\1\u022e\1\u022f\2\u0230\4\u022f\44\0\1\u0231\53\0\1\u0227"+
    "\12\0\1\u0231\13\0\3\u0222\1\u0228\3\u0222\43\0\1\u0232"+
    "\20\0\1\u0232\3\0\2\u022a\16\0\1\u0233\35\0\1\u022a"+
    "\1\0\2\u022a\25\0\1\u0233\36\0\7\u022b\1\0\2\u022a"+
    "\16\0\1\u0233\35\0\1\u022a\1\u022b\2\u022c\4\u022b\1\0"+
    "\2\u022d\16\0\1\u0233\25\0\1\u0193\7\0\1\u022d\1\0"+
    "\2\u022d\5\0\2\u022d\11\0\1\u016f\4\0\1\u0234\25\u016f"+
    "\1\u0194\7\u016f\1\u022e\1\u0184\2\u0235\4\u0184\21\0\1\u0233"+
    "\25\0\1\u0193\10\0\7\u022f\1\0\2\u022d\16\0\1\u0233"+
    "\25\0\1\u0193\7\0\1\u022d\1\u022f\2\u0230\4\u022f\55\0"+
    "\1\u0236\12\0\2\u0237\54\0\1\u0237\1\u0238\2\u0239\4\u0238"+
    "\1\0\2\u023a\54\0\1\u023a\1\u023b\2\u023c\4\u023b\1\0"+
    "\2\u023d\11\0\1\u016f\4\0\36\u016f\1\u023e\1\u023f\2\u0240"+
    "\4\u023f\1\0\2\u022d\16\0\1\u0233\25\0\1\u0193\7\0"+
    "\1\u022d\1\u0184\2\u0235\4\u0184\10\0\1\u0241\57\0\2\u0237"+
    "\5\0\1\u0242\46\0\1\u0237\1\0\2\u0237\14\0\1\u0242"+
    "\47\0\7\u0238\1\0\2\u0237\5\0\1\u0242\46\0\1\u0237"+
    "\1\u0238\2\u0239\4\u0238\1\0\2\u023a\17\0\1\u0243\34\0"+
    "\1\u023a\1\0\2\u023a\26\0\1\u0243\35\0\7\u023b\1\0"+
    "\2\u023a\17\0\1\u0243\34\0\1\u023a\1\u023b\2\u023c\4\u023b"+
    "\1\0\2\u023d\17\0\1\u0243\24\0\1\u0193\7\0\1\u023d"+
    "\1\0\2\u023d\5\0\2\u023d\11\0\1\u016f\4\0\1\u016f"+
    "\1\u0244\24\u016f\1\u0194\7\u016f\1\u023e\1\u0184\2\u0245\4\u0184"+
    "\22\0\1\u0243\24\0\1\u0193\10\0\7\u023f\1\0\2\u023d"+
    "\17\0\1\u0243\24\0\1\u0193\7\0\1\u023d\1\u023f\2\u0240"+
    "\4\u023f\26\0\1\u0246\1\0\1\u0247\43\0\1\u0248\112\0"+
    "\1\u0249\31\0\1\u0249\4\0\2\u0182\11\0\1\u016f\4\0"+
    "\10\u016f\1\u024a\25\u016f\1\u0183\1\u0184\2\u0185\1\u024b\3\u0184"+
    "\1\0\2\u023d\17\0\1\u0243\24\0\1\u0193\7\0\1\u023d"+
    "\1\u0184\2\u0245\4\u0184\31\0\1\u024c\12\0\1\u024d\16\0"+
    "\1\u024c\47\0\1\u024e\41\0\1\u024f\113\0\1\u0250\23\0"+
    "\2\u0182\11\0\1\u016f\4\0\23\u016f\1\u0251\12\u016f\1\u0183"+
    "\1\u0184\2\u0185\4\u0184\44\0\1\u0250\2\0\1\u0193\10\0"+
    "\7\u0184\34\0\1\u0252\72\0\1\u0253\72\0\1\u0254\22\0"+
    "\2\u0255\1\0\14\u0255\1\u0256\41\u0255\1\0\4\u0255\24\0"+
    "\1\u0257\44\0\2\u0182\11\0\1\u016f\4\0\2\u016f\1\u0258"+
    "\33\u016f\1\u0183\1\u0184\2\u0185\4\u0184\25\0\1\u0253\61\0"+
    "\1\u0259\106\0\1\u025a\45\0\1\u025b\47\0\2\u0255\1\0"+
    "\14\u0255\1\u025c\41\u0255\1\0\4\u0255\40\0\1\u025d\30\0"+
    "\2\u0182\11\0\1\u016f\4\0\16\u016f\1\u025e\17\u016f\1\u0183"+
    "\1\u0184\2\u0185\4\u0184\16\0\1\u025f\70\0\1\u0259\22\0"+
    "\1\u0253\20\0\1\u0253\13\0\1\u0260\5\0\1\u025b\47\0"+
    "\2\u0255\1\0\6\u0255\1\u0261\5\u0255\1\u025c\41\u0255\1\0"+
    "\4\u0255\32\0\1\u0262\31\0\1\u0262\4\0\2\u0182\11\0"+
    "\1\u016f\4\0\10\u016f\1\u0263\25\u016f\1\u0183\1\u0184\2\u0185"+
    "\1\u0264\3\u0184\16\0\1\u0265\51\0\2\u0266\54\0\1\u0266"+
    "\1\u0267\2\u0268\4\u0267\1\0\2\u0266\14\0\1\u025b\37\0"+
    "\1\u0266\1\u0267\2\u0268\4\u0267\36\0\1\u0269\31\0\2\u0182"+
    "\11\0\1\u016f\4\0\15\u016f\1\u026a\20\u016f\1\u0183\1\u0184"+
    "\2\u0185\4\u0184\36\0\1\u0269\10\0\1\u0193\10\0\7\u0184"+
    "\3\0\1\u0265\1\u026b\1\0\1\u026b\4\0\1\u0265\1\u026b"+
    "\1\u0265\2\u026b\1\u0265\32\u026b\3\0\2\u026b\10\0\2\u0266"+
    "\25\0\1\u026c\26\0\1\u0266\1\0\2\u0266\34\0\1\u026c"+
    "\27\0\7\u0267\1\0\2\u0266\25\0\1\u026c\26\0\1\u0266"+
    "\1\u0267\2\u0268\4\u0267\1\0\2\u026d\54\0\1\u026d\1\u026e"+
    "\2\u026f\4\u026e\1\0\2\u0270\11\0\1\u016f\4\0\36\u016f"+
    "\1\u0271\1\u0272\2\u0273\4\u0272\3\0\1\u0265\1\u026b\1\0"+
    "\1\u026b\2\0\1\u0274\1\0\1\u0265\1\u026b\1\u0265\2\u026b"+
    "\1\u0265\32\u026b\3\0\2\u026b\30\0\1\u0275\46\0\2\u026d"+
    "\41\0\1\u0276\12\0\1\u026d\1\0\2\u026d\50\0\1\u0276"+
    "\13\0\7\u026e\1\0\2\u026d\41\0\1\u0276\12\0\1\u026d"+
    "\1\u026e\2\u026f\4\u026e\1\0\2\u0270\41\0\1\u0276\2\0"+
    "\1\u0193\7\0\1\u0270\1\0\2\u0270\5\0\2\u0270\11\0"+
    "\1\u016f\4\0\23\u016f\1\u0277\2\u016f\1\u0194\7\u016f\1\u0271"+
    "\1\u0184\2\u0278\4\u0184\44\0\1\u0276\2\0\1\u0193\10\0"+
    "\7\u0272\1\0\2\u0270\41\0\1\u0276\2\0\1\u0193\7\0"+
    "\1\u0270\1\u0272\2\u0273\4\u0272\15\0\1\u0279\114\0\1\u027a"+
    "\20\0\1\u027a\33\0\1\u027b\31\0\1\u027b\4\0\2\u0182"+
    "\11\0\1\u016f\4\0\10\u016f\1\u027c\25\u016f\1\u0183\1\u0184"+
    "\2\u0185\1\u027d\3\u0184\1\0\2\u0270\41\0\1\u0276\2\0"+
    "\1\u0193\7\0\1\u0270\1\u0184\2\u0278\4\u0184\12\0\1\u027e"+
    "\55\0\2\u027f\54\0\1\u027f\1\u0280\2\u0281\4\u0280\40\0"+
    "\1\u0282\27\0\2\u0182\11\0\1\u016f\4\0\17\u016f\1\u0283"+
    "\16\u016f\1\u0183\1\u0184\2\u0185\4\u0184\40\0\1\u0282\6\0"+
    "\1\u0193\10\0\7\u0184\12\0\1\2\55\0\2\u027f\17\0"+
    "\1\u0284\34\0\1\u027f\1\0\2\u027f\26\0\1\u0284\35\0"+
    "\7\u0280\1\0\2\u027f\17\0\1\u0284\34\0\1\u027f\1\u0280"+
    "\2\u0281\4\u0280\1\0\2\u0285\54\0\1\u0285\1\u0286\2\u0287"+
    "\4\u0286\1\0\2\u0288\11\0\1\u016f\4\0\36\u016f\1\u0289"+
    "\1\u028a\2\u028b\4\u028a\25\0\1\u028c\42\0\2\u0285\23\0"+
    "\1\u028d\30\0\1\u0285\1\0\2\u0285\32\0\1\u028d\31\0"+
    "\7\u0286\1\0\2\u0285\23\0\1\u028d\30\0\1\u0285\1\u0286"+
    "\2\u0287\4\u0286\1\0\2\u0288\23\0\1\u028d\20\0\1\u0193"+
    "\7\0\1\u0288\1\0\2\u0288\5\0\2\u0288\11\0\1\u016f"+
    "\4\0\5\u016f\1\u028e\20\u016f\1\u0194\7\u016f\1\u0289\1\u0184"+
    "\2\u028f\4\u0184\26\0\1\u028d\20\0\1\u0193\10\0\7\u028a"+
    "\1\0\2\u0288\23\0\1\u028d\20\0\1\u0193\7\0\1\u0288"+
    "\1\u028a\2\u028b\4\u028a\25\0\1\u0290\100\0\1\u0291\30\0"+
    "\2\u0182\11\0\1\u016f\4\0\16\u016f\1\u0292\17\u016f\1\u0183"+
    "\1\u0184\2\u0185\4\u0184\1\0\2\u0288\23\0\1\u028d\20\0"+
    "\1\u0193\7\0\1\u0288\1\u0184\2\u028f\4\u0184\36\0\1\u0293"+
    "\72\0\1\u0294\25\0\2\u0182\11\0\1\u016f\4\0\21\u016f"+
    "\1\u0295\14\u016f\1\u0183\1\u0184\2\u0185\4\u0184\1\0\2\u0296"+
    "\54\0\1\u0296\1\u0297\2\u0298\4\u0297\1\0\2\u0299\54\0"+
    "\1\u0299\1\u029a\2\u029b\4\u029a\1\0\2\u029c\11\0\1\u016f"+
    "\4\0\36\u016f\1\u029d\1\u029e\2\u029f\4\u029e\1\0\2\u0296"+
    "\20\0\1\u02a0\33\0\1\u0296\1\0\2\u0296\27\0\1\u02a0"+
    "\34\0\7\u0297\1\0\2\u0296\20\0\1\u02a0\33\0\1\u0296"+
    "\1\u0297\2\u0298\4\u0297\1\0\2\u0299\14\0\1\u02a1\37\0"+
    "\1\u0299\1\0\2\u0299\23\0\1\u02a1\40\0\7\u029a\1\0"+
    "\2\u0299\14\0\1\u02a1\37\0\1\u0299\1\u029a\2\u029b\4\u029a"+
    "\1\0\2\u029c\14\0\1\u02a1\27\0\1\u0193\7\0\1\u029c"+
    "\1\0\2\u029c\5\0\2\u029c\11\0\1\u016f\2\0\1\u02a1"+
    "\1\0\26\u016f\1\u0194\7\u016f\1\u029d\1\u0184\2\u02a2\4\u0184"+
    "\17\0\1\u02a1\27\0\1\u0193\10\0\7\u029e\1\0\2\u029c"+
    "\14\0\1\u02a1\27\0\1\u0193\7\0\1\u029c\1\u029e\2\u029f"+
    "\4\u029e\37\0\1\u02a3\30\0\2\u02a4\14\0\1\u02a1\37\0"+
    "\1\u02a4\1\u02a5\2\u02a6\4\u02a5\1\0\2\u029c\14\0\1\u02a1"+
    "\27\0\1\u0193\7\0\1\u029c\1\u0184\2\u02a2\4\u0184\34\0"+
    "\1\u02a7\33\0\2\u02a4\17\0\1\u02a8\34\0\1\u02a4\1\0"+
    "\2\u02a4\26\0\1\u02a8\35\0\7\u02a5\1\0\2\u02a4\17\0"+
    "\1\u02a8\34\0\1\u02a4\1\u02a5\2\u02a6\4\u02a5\34\0\1\u02a9"+
    "\63\0\1\u02aa\31\0\1\u02aa\30\0\1\u02ab\105\0\1\360"+
    "\45\0\1\u02ac\107\0\1\u02ad\47\0\1\u02ae\65\0\1\u02af"+
    "\43\0\2\u02b0\54\0\1\u02b0\1\u02b1\2\u02b2\4\u02b1\1\0"+
    "\2\u02b0\17\0\1\u02b3\34\0\1\u02b0\1\0\2\u02b0\26\0"+
    "\1\u02b3\35\0\7\u02b1\1\0\2\u02b0\17\0\1\u02b3\34\0"+
    "\1\u02b0\1\u02b1\2\u02b2\4\u02b1\51\0\1\u02b4\16\0\2\u02b5"+
    "\54\0\1\u02b5\1\u02b6\2\u02b7\4\u02b6\1\0\2\u02b5\7\0"+
    "\1\u02b8\44\0\1\u02b5\1\0\2\u02b5\16\0\1\u02b8\45\0"+
    "\7\u02b6\1\0\2\u02b5\7\0\1\u02b8\44\0\1\u02b5\1\u02b6"+
    "\2\u02b7\4\u02b6\14\0\1\u02b9\4\0\37\u02b9\21\0\1\2"+
    "\1\0\1\u02b9\4\0\37\u02b9\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\44\1\5\0\25\1\1\0\14\1\1\0"+
    "\7\1\2\0\20\1\1\0\33\1\1\0\22\1\1\0"+
    "\7\1\1\0\2\1\3\0\1\1\1\0\2\1\1\0"+
    "\1\1\7\0\4\1\1\0\6\1\1\0\12\1\1\0"+
    "\1\1\1\0\4\1\2\0\2\1\1\0\3\1\1\0"+
    "\3\1\1\0\1\1\1\0\14\1\2\0\4\1\1\0"+
    "\4\1\1\0\4\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\5\0\2\1\5\0\1\1\1\0\5\1\1\0"+
    "\2\1\2\0\2\1\1\0\6\1\1\0\4\1\2\0"+
    "\5\1\4\0\7\1\2\0\2\1\7\0\4\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\3\1\2\0\2\1\11\0\2\1\1\0\1\1\1\0"+
    "\1\1\2\0\2\1\11\0\1\1\1\0\1\1\2\0"+
    "\2\1\2\0\2\1\14\0\1\1\2\0\1\1\1\0"+
    "\1\1\4\0\1\1\2\0\1\1\1\0\1\1\5\0"+
    "\1\1\5\0\1\1\1\0\1\1\6\0\3\1\2\0"+
    "\1\1\1\0\1\1\6\0\3\1\1\0\1\1\3\0"+
    "\1\1\5\0\1\1\3\0\1\1\1\0\1\1\12\0"+
    "\1\1\5\0\1\1\6\0\1\1\11\0\1\1\10\0"+
    "\1\1\4\0\1\1\6\0\1\1\257\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[697];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private FileWriter writer;

	private void writer(String buff){
		try {
            writer.write(buff);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  afiliado(java.io.Reader in) {
  	try{
		writer = new FileWriter("chunk-clean.txt", true);
	}catch(IOException e){
		e.printStackTrace();
	}
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
	try {
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 4: break;
          case 2:
            { writer(" ");
            }
            // fall through
          case 5: break;
          case 3:
            { writer(yytext());
            }
            // fall through
          case 6: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
