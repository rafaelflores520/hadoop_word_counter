// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Comment-Cleaner.jflex

//10,11,25,60,2
//Mandenos un fichero correcto please ;_;
import java.io.FileWriter;
import java.io.IOException;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class afiliado {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\0\1\4"+
    "\1\5\1\4\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\3\1\13\1\3\1\14\12\15\1\16\1\3\1\0"+
    "\1\4\1\0\1\3\1\4\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\4\51\1\13"+
    "\1\51\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\0\1\4\1\0\1\4\6\0"+
    "\1\2\32\0\1\1\217\0\2\52\115\0\1\53\u0200\0"+
    "\1\1\177\0\13\1\35\0\2\2\5\0\1\1\57\0"+
    "\1\1\312\0\1\54\325\0\1\1\377\0\u0100\55";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\35\1\2\0\1\1"+
    "\4\2\1\1\1\2\1\1\1\2\2\1\3\2\1\1"+
    "\2\2\1\1\1\2\1\1\1\2\1\0\1\2\1\1"+
    "\4\2\1\1\5\2\1\0\4\1\3\2\2\0\4\1"+
    "\1\2\3\1\1\2\1\1\1\2\1\1\2\2\1\1"+
    "\1\2\1\0\1\2\1\1\2\2\1\1\1\2\2\1"+
    "\1\2\3\1\4\2\2\1\2\2\1\1\4\2\2\1"+
    "\1\0\1\1\1\2\1\1\1\2\1\1\2\2\3\1"+
    "\1\2\1\1\1\2\1\1\3\2\1\1\1\0\3\2"+
    "\3\1\4\0\1\1\3\0\4\2\1\0\1\1\5\2"+
    "\1\0\1\1\10\2\1\0\1\2\1\0\2\1\1\2"+
    "\1\1\2\0\2\1\1\0\3\2\1\0\1\2\1\1"+
    "\1\2\1\0\1\2\1\0\3\2\1\1\2\2\1\1"+
    "\4\2\2\0\1\2\1\1\2\2\1\0\2\2\2\1"+
    "\1\0\3\2\1\1\1\0\1\2\1\0\1\1\2\0"+
    "\1\1\5\0\1\1\1\2\1\0\5\2\1\0\1\2"+
    "\2\0\2\2\1\0\5\1\1\2\1\0\2\1\2\2"+
    "\1\0\2\2\1\1\1\2\1\1\1\0\2\2\1\1"+
    "\1\2\3\1\2\0\4\1\1\2\1\0\1\2\2\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\2\2\2\0\2\1\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\2\0\1\2\1\1"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\2\0\1\2\3\0"+
    "\1\2\3\0\1\2\2\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\43\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\56\0\134\0\212\0\270\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u06a6\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6"+
    "\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956"+
    "\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6"+
    "\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36"+
    "\0\u1c64\0\u1676\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78"+
    "\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8"+
    "\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058"+
    "\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8"+
    "\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u213e"+
    "\0\u216c\0\u2338\0\u2366\0\u2394\0\u23c2\0\u23f0\0\u241e\0\u244c"+
    "\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560\0\u258e\0\u25bc"+
    "\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u2338\0\u26d0\0\u26fe"+
    "\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4\0\u2812\0\u2840\0\u286e"+
    "\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954\0\u2982\0\u29b0\0\u29de"+
    "\0\u1bda\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4\0\u2af2\0\u2b20"+
    "\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06\0\u2c34\0\u2c62\0\u25ea"+
    "\0\u2c90\0\u2cbe\0\u241e\0\u28ca\0\u2cec\0\u2d1a\0\u2d48\0\u2d76"+
    "\0\u2c90\0\u2da4\0\u2cbe\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a"+
    "\0\u2eb8\0\u2ee6\0\u2f14\0\u21f6\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc"+
    "\0\u2ffa\0\u3028\0\u3056\0\u2646\0\u0f74\0\u3084\0\u30b2\0\u30e0"+
    "\0\u12b0\0\u310e\0\u313c\0\u316a\0\u3198\0\u31c6\0\u31f4\0\u3222"+
    "\0\u3250\0\u2d48\0\u2d76\0\u327e\0\u32ac\0\u32da\0\u3308\0\u3336"+
    "\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u3478\0\u34a6"+
    "\0\u34d4\0\u3502\0\u3530\0\u355e\0\u358c\0\u35ba\0\u33ee\0\u35e8"+
    "\0\u3616\0\u3644\0\u3672\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\u3758"+
    "\0\u3786\0\u37b4\0\u37e2\0\u3810\0\u383e\0\u386c\0\u389a\0\u38c8"+
    "\0\u38f6\0\u3924\0\u3952\0\u3980\0\u39ae\0\u39dc\0\u3a0a\0\u3a38"+
    "\0\u3a66\0\u3a94\0\u3ac2\0\u3af0\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8"+
    "\0\u3bd6\0\u3c04\0\u3c32\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18"+
    "\0\u3d46\0\u3d74\0\u3da2\0\u3dd0\0\u3dfe\0\u3e2c\0\u3e5a\0\u3e88"+
    "\0\u3eb6\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e\0\u3f9c\0\u3fca\0\u3ff8"+
    "\0\u4026\0\u4054\0\u4082\0\u40b0\0\u40de\0\u410c\0\u413a\0\u4168"+
    "\0\u4196\0\u41c4\0\u41f2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\3\2\1\4\5\2\1\5\2\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\2\1\40\1\41\1\42\104\0\1\43\70\0"+
    "\1\44\2\0\1\44\31\0\1\45\1\46\3\47\1\50"+
    "\1\51\1\52\3\47\1\53\1\52\1\54\3\47\1\55"+
    "\2\52\6\47\2\0\1\2\21\0\1\47\1\56\2\47"+
    "\1\57\11\47\1\60\5\47\1\61\3\47\1\52\1\47"+
    "\24\0\1\62\1\47\1\63\4\47\1\64\6\47\1\65"+
    "\13\47\24\0\3\47\1\66\4\47\1\67\5\47\1\70"+
    "\5\47\1\71\5\47\1\0\1\72\22\0\1\73\3\47"+
    "\1\74\6\47\1\75\7\47\1\76\1\47\1\77\4\47"+
    "\24\0\4\47\1\100\1\101\2\47\1\102\5\47\1\103"+
    "\2\47\1\104\1\47\1\105\1\106\5\47\1\0\1\107"+
    "\22\0\4\47\1\61\1\47\1\110\23\47\24\0\1\111"+
    "\3\47\1\112\2\47\1\113\1\114\5\47\1\115\4\47"+
    "\1\116\6\47\1\0\1\117\12\0\1\120\7\0\5\47"+
    "\1\52\2\47\1\121\3\47\1\52\1\122\4\47\1\123"+
    "\1\124\1\47\1\125\4\47\1\0\1\126\1\127\21\0"+
    "\1\45\10\47\1\130\12\47\1\131\5\47\24\0\12\47"+
    "\1\132\2\47\1\133\14\47\3\0\1\134\20\0\1\50"+
    "\3\47\1\135\3\47\1\136\2\47\1\137\2\47\1\140"+
    "\13\47\1\0\1\141\22\0\1\142\3\47\1\52\7\47"+
    "\1\143\1\47\1\144\5\47\1\145\3\47\1\146\1\47"+
    "\24\0\4\47\1\147\10\47\1\150\1\151\13\47\24\0"+
    "\1\47\1\152\3\47\1\153\1\47\1\52\2\47\1\52"+
    "\2\47\1\154\1\155\2\47\1\52\1\47\1\156\1\157"+
    "\1\160\1\161\3\47\3\0\1\2\20\0\17\47\1\162"+
    "\4\47\1\61\5\47\24\0\20\47\1\163\3\47\1\164"+
    "\5\47\24\0\4\47\1\165\14\47\1\166\10\47\24\0"+
    "\1\167\3\47\1\170\2\47\1\171\1\172\5\47\1\173"+
    "\3\47\1\174\1\47\1\73\5\47\1\0\1\175\1\176"+
    "\21\0\7\47\1\177\6\47\1\200\2\47\1\201\1\47"+
    "\1\202\2\47\1\203\3\47\24\0\15\47\1\204\1\47"+
    "\1\52\2\47\1\205\1\47\1\206\5\47\2\0\1\207"+
    "\21\0\4\47\1\210\20\47\1\211\4\47\24\0\1\212"+
    "\3\47\1\213\2\47\1\214\1\215\5\47\1\216\7\47"+
    "\1\217\3\47\1\0\1\220\22\0\27\47\1\35\2\47"+
    "\24\0\1\221\3\47\1\222\11\47\1\223\11\47\1\224"+
    "\1\47\24\0\31\47\1\37\14\0\1\120\14\0\1\2"+
    "\2\0\1\126\3\0\1\2\1\225\4\0\1\127\1\226"+
    "\1\0\1\227\5\0\1\126\1\127\21\0\1\230\3\0"+
    "\1\231\2\0\1\232\1\175\5\0\1\233\3\0\1\176"+
    "\1\0\1\234\6\0\1\175\1\176\33\0\1\134\2\0"+
    "\1\235\17\0\1\134\43\0\1\2\27\0\1\236\60\0"+
    "\1\45\31\47\24\0\16\47\1\237\13\47\24\0\32\47"+
    "\24\0\23\47\1\160\6\47\24\0\1\240\31\47\24\0"+
    "\13\47\1\52\1\241\5\47\1\242\7\47\2\0\1\243"+
    "\21\0\3\47\1\52\24\47\1\244\1\47\24\0\4\47"+
    "\1\123\25\47\24\0\1\47\1\56\30\47\24\0\2\47"+
    "\1\245\1\47\1\161\1\246\2\47\1\247\2\47\1\250"+
    "\7\47\1\251\6\47\1\0\1\252\22\0\23\47\1\221"+
    "\6\47\24\0\23\47\1\52\6\47\24\0\15\47\1\253"+
    "\14\47\24\0\2\47\1\63\27\47\24\0\1\254\31\47"+
    "\24\0\14\47\1\125\7\47\1\255\5\47\24\0\3\47"+
    "\1\66\26\47\24\0\3\47\1\123\26\47\24\0\4\47"+
    "\1\212\3\47\1\247\4\47\1\256\10\47\1\161\3\47"+
    "\1\0\1\252\22\0\21\47\1\257\10\47\27\0\1\127"+
    "\52\0\2\47\1\221\27\47\24\0\4\47\1\74\25\47"+
    "\24\0\22\47\1\125\7\47\2\0\1\227\21\0\2\47"+
    "\1\52\27\47\24\0\4\47\1\161\25\47\24\0\26\47"+
    "\1\52\3\47\24\0\5\47\1\101\24\47\24\0\13\47"+
    "\1\260\16\47\24\0\21\47\1\52\10\47\24\0\16\47"+
    "\1\261\13\47\24\0\17\47\1\262\12\47\24\0\21\47"+
    "\1\263\10\47\37\0\1\264\42\0\6\47\1\110\23\47"+
    "\24\0\1\45\2\47\1\123\16\47\1\123\2\47\1\265"+
    "\4\47\2\0\1\127\11\0\1\266\7\0\3\47\1\52"+
    "\15\47\1\267\1\52\7\47\2\0\1\2\21\0\7\47"+
    "\1\113\22\47\24\0\14\47\1\146\5\47\1\52\7\47"+
    "\2\0\1\2\21\0\26\47\1\270\3\47\24\0\23\47"+
    "\1\271\6\47\40\0\1\272\5\0\1\2\11\0\1\2"+
    "\24\0\1\2\7\0\1\273\1\2\10\0\1\227\30\0"+
    "\10\47\1\121\21\47\1\0\1\126\22\0\23\47\1\242"+
    "\6\47\24\0\15\47\1\256\14\47\14\0\1\274\7\0"+
    "\22\47\1\275\7\47\2\0\1\276\21\0\4\47\1\52"+
    "\25\47\34\0\1\126\22\0\1\126\37\0\1\277\40\0"+
    "\11\47\1\130\20\47\24\0\22\47\1\61\7\47\2\0"+
    "\1\43\21\0\12\47\1\132\17\47\3\0\1\134\20\0"+
    "\4\47\1\100\11\47\1\300\13\47\36\0\1\134\22\0"+
    "\1\134\20\0\23\47\1\301\6\47\24\0\12\47\1\302"+
    "\17\47\3\0\1\303\20\0\13\47\1\137\16\47\24\0"+
    "\13\47\1\52\16\47\36\0\1\303\22\0\1\303\20\0"+
    "\15\47\1\304\12\47\1\305\1\47\24\0\14\47\1\143"+
    "\15\47\24\0\21\47\1\125\1\61\7\47\2\0\1\43"+
    "\21\0\2\47\1\221\17\47\1\306\7\47\2\0\1\307"+
    "\21\0\22\47\1\310\7\47\2\0\1\311\21\0\4\47"+
    "\1\312\25\47\24\0\15\47\1\150\14\47\24\0\21\47"+
    "\1\52\1\47\1\52\6\47\24\0\25\47\1\313\4\47"+
    "\24\0\5\47\1\52\24\47\24\0\2\47\1\125\10\47"+
    "\1\304\16\47\24\0\16\47\1\155\13\47\24\0\7\47"+
    "\1\160\22\47\24\0\6\47\1\314\12\47\1\315\1\47"+
    "\1\52\6\47\24\0\4\47\1\103\25\47\24\0\15\47"+
    "\1\52\14\47\24\0\17\47\1\162\12\47\24\0\20\47"+
    "\1\163\11\47\24\0\16\47\1\61\13\47\24\0\1\316"+
    "\31\47\24\0\21\47\1\166\10\47\24\0\14\47\1\125"+
    "\15\47\24\0\15\47\1\75\14\47\24\0\1\317\3\47"+
    "\1\320\11\47\1\321\13\47\24\0\14\47\1\322\1\323"+
    "\14\47\24\0\14\47\1\324\15\47\24\0\22\47\1\174"+
    "\7\47\2\0\1\176\35\0\1\325\1\326\62\0\1\176"+
    "\11\0\1\176\21\0\1\327\3\47\1\330\3\47\1\331"+
    "\5\47\1\75\2\47\1\332\10\47\1\0\1\333\22\0"+
    "\16\47\1\52\13\47\24\0\24\47\1\125\3\47\1\52"+
    "\1\47\24\0\23\47\1\202\6\47\24\0\10\47\1\323"+
    "\21\47\1\0\1\326\22\0\3\47\1\160\7\47\1\334"+
    "\7\47\1\335\6\47\24\0\4\47\1\336\25\47\24\0"+
    "\24\47\1\206\5\47\30\0\1\337\51\0\21\47\1\304"+
    "\10\47\24\0\25\47\1\211\4\47\24\0\22\47\1\123"+
    "\7\47\2\0\1\127\11\0\1\340\7\0\3\47\1\52"+
    "\15\47\1\55\3\47\1\125\4\47\24\0\1\341\3\47"+
    "\1\342\3\47\1\343\5\47\1\344\11\47\1\270\1\47"+
    "\1\0\1\345\22\0\13\47\1\140\7\47\1\346\6\47"+
    "\24\0\15\47\1\256\6\47\1\255\5\47\24\0\26\47"+
    "\1\217\3\47\37\0\1\273\7\0\1\347\32\0\7\47"+
    "\1\52\22\47\24\0\1\221\21\47\2\52\6\47\2\0"+
    "\1\2\21\0\24\47\1\350\5\47\24\0\30\47\1\224"+
    "\1\47\47\0\1\243\22\0\1\274\31\0\1\276\11\0"+
    "\1\276\25\0\1\2\65\0\1\227\56\0\1\351\40\0"+
    "\1\352\3\0\1\353\11\0\1\354\53\0\1\355\43\0"+
    "\1\356\57\0\1\357\11\0\1\360\33\0\1\361\3\0"+
    "\32\361\24\0\24\47\1\61\1\125\4\47\24\0\10\47"+
    "\1\362\21\47\1\0\1\363\22\0\16\47\1\131\13\47"+
    "\42\0\1\2\37\0\23\47\1\364\6\47\24\0\1\365"+
    "\31\47\24\0\16\47\1\366\13\47\24\0\15\47\1\367"+
    "\14\47\24\0\16\47\1\100\13\47\24\0\26\47\1\370"+
    "\3\47\41\0\1\371\30\0\1\43\7\0\15\47\1\164"+
    "\5\47\1\52\6\47\24\0\15\47\1\372\14\47\24\0"+
    "\13\47\1\67\16\47\14\0\1\43\7\0\23\47\1\52"+
    "\6\47\24\0\10\47\1\247\21\47\1\0\1\252\22\0"+
    "\4\47\1\262\25\47\24\0\14\47\1\52\15\47\23\0"+
    "\1\373\32\47\24\0\23\47\1\156\6\47\30\0\1\374"+
    "\51\0\4\47\1\123\3\47\1\247\21\47\1\0\1\252"+
    "\25\0\1\2\7\0\1\273\6\0\1\2\11\0\1\2"+
    "\21\0\4\47\1\270\15\47\1\275\7\47\2\0\1\276"+
    "\11\0\1\333\7\0\22\47\1\52\7\47\2\0\1\2"+
    "\21\0\17\47\1\375\12\47\46\0\1\311\11\0\1\311"+
    "\34\0\1\2\55\0\1\273\6\0\1\2\11\0\1\2"+
    "\21\0\4\47\1\376\25\47\30\0\1\377\41\0\1\43"+
    "\32\0\1\2\32\0\26\47\1\u0100\3\47\14\0\1\333"+
    "\7\0\32\47\24\0\4\47\1\u0101\25\47\30\0\1\u0102"+
    "\51\0\30\47\1\52\1\47\24\0\1\47\1\125\30\47"+
    "\24\0\23\47\1\u0103\6\47\47\0\1\u0104\32\0\3\47"+
    "\1\52\26\47\24\0\10\47\1\u0105\21\47\1\0\1\u0106"+
    "\22\0\7\47\1\61\22\47\24\0\22\47\1\u0107\7\47"+
    "\2\0\1\u0108\21\0\13\47\1\u0109\16\47\24\0\15\47"+
    "\1\u010a\14\47\14\0\1\266\7\0\22\47\1\52\7\47"+
    "\2\0\1\2\21\0\24\47\1\255\5\47\24\0\17\47"+
    "\1\u0109\12\47\24\0\2\47\1\125\27\47\24\0\4\47"+
    "\1\244\25\47\43\0\1\u010b\40\0\1\227\53\0\15\47"+
    "\1\52\5\47\1\270\6\47\24\0\1\47\1\u010c\6\47"+
    "\1\u010d\3\47\1\u010e\1\52\3\47\1\u010f\1\125\5\47"+
    "\1\u0110\1\47\1\0\1\u0111\1\227\21\0\22\47\1\52"+
    "\7\47\2\0\1\2\21\0\16\47\1\u0112\13\47\46\0"+
    "\1\2\11\0\1\2\21\0\4\47\1\u0113\25\47\24\0"+
    "\10\47\1\140\21\47\1\0\1\273\25\0\1\2\55\0"+
    "\1\2\7\0\1\273\5\0\1\227\3\0\1\227\30\0"+
    "\23\47\1\270\6\47\24\0\15\47\1\u0114\3\47\1\u0115"+
    "\10\47\24\0\2\47\1\221\10\47\1\125\16\47\14\0"+
    "\1\333\7\0\14\47\1\52\5\47\1\52\7\47\2\0"+
    "\1\2\23\0\1\356\10\0\1\227\42\0\7\47\1\u0116"+
    "\22\47\33\0\1\u0117\36\0\1\340\7\0\3\47\1\52"+
    "\7\47\1\140\5\47\1\u0118\3\47\1\125\4\47\46\0"+
    "\1\227\11\0\1\227\36\0\1\u0119\30\0\1\266\31\0"+
    "\1\2\11\0\1\2\45\0\1\u011a\35\0\1\u011b\60\0"+
    "\1\2\74\0\1\2\55\0\1\u011c\27\0\15\47\1\u011d"+
    "\14\47\41\0\1\u011e\40\0\7\47\1\257\22\47\24\0"+
    "\24\47\1\75\5\47\24\0\21\47\1\125\10\47\24\0"+
    "\6\47\1\52\23\47\24\0\4\47\1\77\25\47\32\0"+
    "\1\2\47\0\6\47\1\u011f\23\47\21\0\1\u0120\57\0"+
    "\1\373\55\0\1\373\22\47\1\262\7\47\2\0\1\374"+
    "\21\0\13\47\1\u0121\16\47\37\0\1\u0122\42\0\13\47"+
    "\1\304\16\47\37\0\1\u0123\42\0\16\47\1\u0124\13\47"+
    "\42\0\1\u0125\37\0\4\47\1\u0126\25\47\30\0\1\u0127"+
    "\41\0\1\43\7\0\32\47\24\0\10\47\1\u0128\21\47"+
    "\1\0\1\u0129\22\0\21\47\1\u0100\10\47\24\0\22\47"+
    "\1\u012a\7\47\2\0\1\u012b\21\0\4\47\1\270\25\47"+
    "\14\0\1\340\7\0\3\47\1\52\7\47\1\140\5\47"+
    "\1\125\3\47\1\125\4\47\45\0\1\u011c\34\0\24\47"+
    "\1\u012c\5\47\24\0\22\47\1\331\7\47\2\0\1\333"+
    "\21\0\4\47\1\u0114\25\47\24\0\10\47\1\161\5\47"+
    "\1\u012d\13\47\1\0\1\u012e\32\0\1\u012e\5\0\1\u012f"+
    "\14\0\1\u012e\22\0\4\47\1\52\15\47\1\u0130\7\47"+
    "\2\0\1\u0131\11\0\1\43\100\0\1\72\65\0\1\u0132"+
    "\54\0\1\43\11\0\1\43\21\0\4\47\1\u0133\25\47"+
    "\21\0\1\u0134\65\0\1\2\100\0\1\2\25\0\24\47"+
    "\1\u0135\5\47\50\0\1\u0136\31\0\13\47\1\u0137\16\47"+
    "\37\0\1\u0138\42\0\23\47\1\u0139\6\47\47\0\1\u013a"+
    "\32\0\6\47\1\221\23\47\24\0\24\47\1\61\5\47"+
    "\41\0\1\2\64\0\1\43\31\0\4\47\1\u013b\25\47"+
    "\30\0\1\u013c\60\0\1\u013d\46\0\23\47\1\u013e\6\47"+
    "\10\0\1\u0134\1\u013f\1\0\1\u013f\4\0\3\u013f\1\u0134"+
    "\32\u013f\24\0\22\47\1\u0101\7\47\2\0\1\u0102\43\0"+
    "\1\u0102\11\0\1\u0102\21\0\25\47\1\u0140\4\47\51\0"+
    "\1\u0141\30\0\2\47\1\u0142\27\47\26\0\1\u0143\53\0"+
    "\13\47\1\u0144\16\47\37\0\1\u0145\52\0\1\252\22\0"+
    "\1\252\22\0\10\47\1\u0146\21\47\1\0\1\u0147\22\0"+
    "\4\47\1\331\25\47\30\0\1\333\51\0\16\47\1\u0148"+
    "\13\47\42\0\1\u0149\37\0\5\47\1\52\17\47\1\u0140"+
    "\4\47\31\0\1\2\17\0\1\u0141\30\0\17\47\1\u014a"+
    "\12\47\43\0\1\u014b\36\0\10\47\1\u014c\21\47\1\0"+
    "\1\u014d\32\0\1\u014d\22\0\1\u014d\4\0\2\u014e\14\0"+
    "\32\47\6\0\2\u014e\72\0\15\47\1\u014f\14\47\41\0"+
    "\1\u0150\50\0\1\u0151\14\0\1\u0152\5\0\1\u0151\22\0"+
    "\23\47\1\u0153\6\47\47\0\1\u0154\47\0\1\u0155\50\0"+
    "\1\u0156\22\0\1\u0156\22\0\10\47\1\u0157\21\47\1\0"+
    "\1\u0158\32\0\1\u0158\22\0\1\u0158\27\0\1\243\53\0"+
    "\1\u0159\52\0\17\47\1\u015a\12\47\43\0\1\u015b\42\0"+
    "\1\243\51\0\5\47\1\u015c\24\47\31\0\1\u015d\50\0"+
    "\16\47\1\u015e\13\47\42\0\1\u015f\37\0\21\47\1\u0160"+
    "\10\47\45\0\1\u0161\32\0\1\u0162\1\0\32\47\22\0"+
    "\1\u0162\55\0\1\u0162\2\0\1\u0163\64\0\1\u0164\22\0"+
    "\1\u0164\45\0\1\u0165\54\0\1\u0166\11\0\1\u0166\12\0"+
    "\1\u0167\52\0\1\u0168\65\0\1\u0169\40\0\2\u016a\1\0"+
    "\12\u016a\1\u016b\37\u016a\16\0\1\u016c\40\0\2\u016a\1\0"+
    "\12\u016a\1\u016d\37\u016a\12\0\1\u016e\3\0\1\u016c\40\0"+
    "\2\u016a\1\0\6\u016a\1\u016f\3\u016a\1\u016d\37\u016a\27\0"+
    "\1\u0170\44\0\1\u016c\10\0\1\u0170\46\0\1\u0171\77\0"+
    "\1\u0172\11\0\1\u0172\22\0\1\u0173\60\0\1\u0174\55\0"+
    "\1\u0175\66\0\1\u0176\42\0\1\u0177\71\0\1\u0178\52\0"+
    "\1\u0179\55\0\1\u017a\46\0\1\u017b\53\0\1\u017c\76\0"+
    "\1\u017d\36\0\1\u017e\54\0\1\u017f\53\0\1\u0180\104\0"+
    "\1\u0181\20\0\1\u0182\56\0\1\u0183\3\0\33\u0183\16\0"+
    "\1\2\1\u0183\3\0\33\u0183\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16928];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\37\1\2\0\25\1\1\0\14\1\1\0"+
    "\7\1\2\0\20\1\1\0\33\1\1\0\22\1\1\0"+
    "\6\1\4\0\1\1\3\0\4\1\1\0\6\1\1\0"+
    "\11\1\1\0\1\1\1\0\4\1\2\0\2\1\1\0"+
    "\3\1\1\0\3\1\1\0\1\1\1\0\13\1\2\0"+
    "\4\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\5\0\2\1\1\0\5\1\1\0"+
    "\1\1\2\0\2\1\1\0\6\1\1\0\4\1\1\0"+
    "\5\1\1\0\7\1\2\0\5\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\2\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\3\0\1\1\3\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\43\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private FileWriter writer;

	private void writer(String buff){
		try {
            writer.write(buff);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  afiliado(java.io.Reader in) {
  	try{
		writer = new FileWriter("chunk-clean.txt", true);
	}catch(IOException e){
		e.printStackTrace();
	}
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
	try {
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 4: break;
          case 2:
            { writer(yytext());
            }
            // fall through
          case 5: break;
          case 3:
            { writer(" ");
            }
            // fall through
          case 6: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
