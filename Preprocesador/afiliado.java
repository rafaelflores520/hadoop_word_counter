// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Comment-Cleaner.jflex

//10,11,25,60,2
//Mandenos un fichero correcto please ;_;
import java.io.FileWriter;
import java.io.IOException;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class afiliado {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\4\1\5\1\0"+
    "\1\6\1\7\1\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\6\1\15\1\16\1\17\1\20\12\21\1\22\1\5"+
    "\1\0\1\6\1\0\1\5\1\6\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\56\1\60\1\56\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\61\1\51\1\52\1\53\1\54\1\0"+
    "\1\6\1\0\1\6\1\0\5\62\1\63\32\62\1\64"+
    "\217\62\2\65\115\62\1\66\u0200\62\1\64\177\62\13\64"+
    "\35\62\2\63\5\62\1\64\57\62\1\64\312\62\1\67"+
    "\325\62\1\64\377\62\u0100\70";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\3\34\1\2\3"+
    "\3\1\5\0\1\1\4\2\1\1\1\2\1\1\1\2"+
    "\2\1\3\2\1\1\2\2\1\1\1\2\1\1\1\2"+
    "\1\0\1\2\1\1\4\2\1\1\5\2\1\0\4\1"+
    "\3\2\2\0\4\1\1\2\3\1\1\2\1\1\1\2"+
    "\1\1\2\2\1\1\1\2\1\0\1\2\1\1\2\2"+
    "\1\1\1\2\2\1\1\2\3\1\4\2\2\1\2\2"+
    "\1\1\4\2\2\1\1\0\1\1\1\2\1\1\1\2"+
    "\1\1\2\2\3\1\1\2\1\1\1\2\1\1\3\2"+
    "\1\1\1\0\3\2\4\1\1\0\2\1\3\0\1\1"+
    "\1\0\1\3\1\1\1\0\1\1\7\0\4\2\1\0"+
    "\1\1\5\2\1\0\1\1\11\2\1\0\1\2\1\0"+
    "\2\1\1\2\1\1\2\0\2\1\1\0\3\2\1\0"+
    "\1\2\1\1\1\2\1\0\1\2\1\0\3\2\1\1"+
    "\3\2\1\1\4\2\2\0\1\2\1\1\2\2\1\0"+
    "\2\2\2\1\1\0\3\2\1\1\1\0\1\2\1\0"+
    "\1\1\2\0\1\1\5\0\2\1\5\0\1\2\1\0"+
    "\5\2\1\0\2\2\2\0\2\2\1\0\5\1\1\2"+
    "\1\0\2\1\2\2\2\0\1\2\1\1\1\2\1\1"+
    "\1\2\4\0\2\2\1\1\1\2\3\1\2\0\2\1"+
    "\7\0\2\1\2\2\1\0\1\2\2\0\1\2\1\0"+
    "\1\2\2\0\1\2\1\0\3\2\2\0\2\1\11\0"+
    "\2\2\1\0\1\2\1\0\1\2\2\0\2\2\11\0"+
    "\1\2\1\0\1\2\2\0\1\1\1\2\2\0\2\2"+
    "\14\0\1\2\2\0\1\2\1\0\1\2\4\0\1\2"+
    "\2\0\1\2\1\0\1\2\5\0\1\2\5\0\1\2"+
    "\1\0\1\2\6\0\3\2\2\0\1\2\1\0\1\2"+
    "\6\0\3\2\1\0\1\2\3\0\1\2\5\0\1\2"+
    "\3\0\1\2\1\0\1\2\12\0\1\2\5\0\1\2"+
    "\6\0\1\2\11\0\1\2\10\0\1\2\4\0\1\2"+
    "\6\0\1\2\257\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[698];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\162\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876"+
    "\0\u08af\0\u08e8\0\u0921\0\u011d\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u09cc\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94"+
    "\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484"+
    "\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c"+
    "\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u1d64\0\u27a2\0\u27db"+
    "\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3"+
    "\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b"+
    "\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb"+
    "\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u2da5\0\u2dde\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1"+
    "\0\u341a\0\u3453\0\u348c\0\u3018\0\u34c5\0\u34fe\0\u3537\0\u3570"+
    "\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738"+
    "\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u2568\0\u38c7"+
    "\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f"+
    "\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57"+
    "\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u33a8\0\u3d74\0\u3dad\0\u316e"+
    "\0\u3738\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3d74\0\u3eca\0\u3dad"+
    "\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092"+
    "\0\u40cb\0\u4104\0\u413d\0\u4176\0\u2e89\0\u41af\0\u41e8\0\u4221"+
    "\0\u425a\0\u4293\0\u42cc\0\u4305\0\u341a\0\u433e\0\u4377\0\u43b0"+
    "\0\u43e9\0\u4422\0\u445b\0\u4494\0\u14b5\0\u44cd\0\u4506\0\u453f"+
    "\0\u4578\0\u18b7\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce"+
    "\0\u4707\0\u3e58\0\u3e91\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824"+
    "\0\u485d\0\u4896\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec"+
    "\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4"+
    "\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c"+
    "\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44"+
    "\0\u4f7d\0\u4fb6\0\u4fef\0\u4b42\0\u5028\0\u5061\0\u509a\0\u50d3"+
    "\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b"+
    "\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8\0\u53f1\0\u542a\0\u5463"+
    "\0\u549c\0\u54d5\0\u550e\0\u5547\0\u5580\0\u55b9\0\u55f2\0\u562b"+
    "\0\u5664\0\u569d\0\u56d6\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3"+
    "\0\u582c\0\u5865\0\u589e\0\u58d7\0\u5910\0\u5949\0\u5982\0\u59bb"+
    "\0\u59f4\0\u5a2d\0\u5a66\0\u5a9f\0\u5ad8\0\u5b11\0\u5b4a\0\u5b83"+
    "\0\u5bbc\0\u5bf5\0\u5c2e\0\u5c67\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b"+
    "\0\u5d84\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68\0\u5ea1\0\u5eda\0\u5f13"+
    "\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7\0\u6030\0\u6069\0\u60a2\0\u60db"+
    "\0\u6114\0\u614d\0\u6186\0\u61bf\0\u61f8\0\u6231\0\u626a\0\u62a3"+
    "\0\u62dc\0\u6315\0\u634e\0\u6387\0\u63c0\0\u63f9\0\u6432\0\u646b"+
    "\0\u64a4\0\u64dd\0\u6516\0\u654f\0\u6588\0\u65c1\0\u65fa\0\u6633"+
    "\0\u666c\0\u66a5\0\u66de\0\u6717\0\u6750\0\u6789\0\u67c2\0\u67fb"+
    "\0\u6834\0\u686d\0\u68a6\0\u68df\0\u6918\0\u6951\0\u698a\0\u69c3"+
    "\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0\0\u6b19\0\u6b52\0\u6b8b"+
    "\0\u6bc4\0\u6bfd\0\u6c36\0\u6c6f\0\u6ca8\0\u6ce1\0\u6d1a\0\u6d53"+
    "\0\u6d8c\0\u6dc5\0\u6dfe\0\u6e37\0\u6e70\0\u6ea9\0\u6ee2\0\u6f1b"+
    "\0\u6f54\0\u6f8d\0\u6fc6\0\u6fff\0\u7038\0\u7071\0\u70aa\0\u70e3"+
    "\0\u711c\0\u7155\0\u718e\0\u71c7\0\u7200\0\u7239\0\u7272\0\u72ab"+
    "\0\u72e4\0\u731d\0\u7356\0\u738f\0\u73c8\0\u7401\0\u743a\0\u7473"+
    "\0\u74ac\0\u74e5\0\u751e\0\u7557\0\u7590\0\u75c9\0\u7602\0\u763b"+
    "\0\u7674\0\u76ad\0\u76e6\0\u771f\0\u7758\0\u7791\0\u77ca\0\u7803"+
    "\0\u783c\0\u7875\0\u78ae\0\u78e7\0\u7920\0\u7959\0\u7992\0\u79cb"+
    "\0\u7a04\0\u7a3d\0\u7a76\0\u7aaf\0\u7ae8\0\u7b21\0\u7b5a\0\u7b93"+
    "\0\u7bcc\0\u7c05\0\u7c3e\0\u7c77\0\u7cb0\0\u7ce9\0\u7d22\0\u7d5b"+
    "\0\u7d94\0\u7dcd\0\u7e06\0\u7e3f\0\u7e78\0\u7eb1\0\u7eea\0\u7f23"+
    "\0\u7f5c\0\u7f95\0\u7fce\0\u8007\0\u8040\0\u8079\0\u80b2\0\u80eb"+
    "\0\u8124\0\u815d\0\u8196\0\u81cf\0\u8208\0\u8241\0\u827a\0\u82b3"+
    "\0\u82ec\0\u8325\0\u835e\0\u8397\0\u83d0\0\u8409\0\u8442\0\u847b"+
    "\0\u84b4\0\u84ed\0\u8526\0\u855f\0\u8598\0\u85d1\0\u860a\0\u8643"+
    "\0\u867c\0\u86b5\0\u86ee\0\u8727\0\u8760\0\u8799\0\u87d2\0\u880b"+
    "\0\u8844\0\u887d\0\u88b6\0\u88ef\0\u8928\0\u8961\0\u899a\0\u89d3"+
    "\0\u8a0c\0\u8a45\0\u8a7e\0\u8ab7\0\u8af0\0\u8b29\0\u8b62\0\u8b9b"+
    "\0\u8bd4\0\u8c0d\0\u8c46\0\u8c7f\0\u8cb8\0\u8cf1\0\u8d2a\0\u8d63"+
    "\0\u8d9c\0\u8dd5\0\u8e0e\0\u8e47\0\u8e80\0\u8eb9\0\u8ef2\0\u8f2b"+
    "\0\u8f64\0\u8f9d\0\u8fd6\0\u900f\0\u9048\0\u9081\0\u90ba\0\u90f3"+
    "\0\u912c\0\u9165\0\u919e\0\u91d7\0\u9210\0\u9249\0\u9282\0\u92bb"+
    "\0\u92f4\0\u932d\0\u9366\0\u939f\0\u93d8\0\u9411\0\u944a\0\u9483"+
    "\0\u94bc\0\u94f5\0\u952e\0\u9567\0\u95a0\0\u95d9\0\u9612\0\u964b"+
    "\0\u9684\0\u96bd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[698];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\2\4\3\2\1\5\7\2\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\4\2\1\42\1\43\2\44\1\45"+
    "\1\46\1\47\1\43\72\0\4\4\54\0\1\4\1\0"+
    "\2\4\35\0\1\50\103\0\1\51\2\0\1\52\36\0"+
    "\1\53\3\0\1\54\72\0\1\55\1\56\3\57\1\60"+
    "\1\61\1\62\3\57\1\63\1\62\1\64\3\57\1\65"+
    "\2\62\6\57\4\0\1\57\4\0\1\2\25\0\1\57"+
    "\1\66\2\57\1\67\11\57\1\70\5\57\1\71\3\57"+
    "\1\62\1\57\4\0\1\57\32\0\1\72\1\57\1\73"+
    "\4\57\1\74\6\57\1\75\13\57\4\0\1\57\32\0"+
    "\3\57\1\76\4\57\1\77\5\57\1\100\5\57\1\101"+
    "\5\57\4\0\1\57\3\0\1\102\26\0\1\103\3\57"+
    "\1\104\6\57\1\105\7\57\1\106\1\57\1\107\4\57"+
    "\4\0\1\107\32\0\4\57\1\110\1\111\2\57\1\112"+
    "\5\57\1\113\2\57\1\114\1\57\1\115\1\116\5\57"+
    "\4\0\1\57\3\0\1\117\26\0\4\57\1\71\1\57"+
    "\1\120\23\57\4\0\1\57\32\0\1\121\3\57\1\122"+
    "\2\57\1\123\1\124\5\57\1\125\4\57\1\126\6\57"+
    "\4\0\1\57\3\0\1\127\14\0\1\130\11\0\5\57"+
    "\1\62\2\57\1\131\3\57\1\62\1\132\4\57\1\133"+
    "\1\134\1\57\1\135\4\57\4\0\1\135\3\0\1\136"+
    "\1\137\25\0\1\55\10\57\1\140\12\57\1\141\5\57"+
    "\4\0\1\57\32\0\12\57\1\142\2\57\1\143\14\57"+
    "\4\0\1\57\5\0\1\144\24\0\1\60\3\57\1\145"+
    "\3\57\1\146\2\57\1\147\2\57\1\150\13\57\4\0"+
    "\1\57\3\0\1\151\26\0\1\152\3\57\1\62\7\57"+
    "\1\153\1\57\1\154\5\57\1\155\3\57\1\156\1\57"+
    "\4\0\1\57\32\0\4\57\1\157\10\57\1\160\1\161"+
    "\13\57\4\0\1\57\32\0\1\57\1\162\3\57\1\163"+
    "\1\57\1\62\2\57\1\62\2\57\1\164\1\165\2\57"+
    "\1\62\1\57\1\166\1\167\1\170\1\171\3\57\4\0"+
    "\1\170\5\0\1\2\24\0\17\57\1\172\4\57\1\71"+
    "\5\57\4\0\1\57\32\0\20\57\1\173\3\57\1\174"+
    "\5\57\4\0\1\57\32\0\4\57\1\175\14\57\1\176"+
    "\10\57\4\0\1\57\32\0\1\177\3\57\1\200\2\57"+
    "\1\201\1\202\5\57\1\203\3\57\1\204\1\57\1\103"+
    "\5\57\4\0\1\57\3\0\1\205\1\206\25\0\7\57"+
    "\1\207\6\57\1\210\2\57\1\211\1\57\1\212\2\57"+
    "\1\213\3\57\4\0\1\57\32\0\15\57\1\214\1\57"+
    "\1\62\2\57\1\215\1\57\1\216\5\57\4\0\1\57"+
    "\4\0\1\217\25\0\4\57\1\220\20\57\1\221\4\57"+
    "\4\0\1\221\32\0\1\222\3\57\1\223\2\57\1\224"+
    "\1\225\5\57\1\226\7\57\1\227\3\57\4\0\1\57"+
    "\3\0\1\230\26\0\27\57\1\37\2\57\4\0\1\57"+
    "\32\0\1\231\3\57\1\232\11\57\1\233\11\57\1\234"+
    "\1\57\4\0\1\57\32\0\31\57\1\41\4\0\1\57"+
    "\10\0\4\4\16\0\4\57\1\220\20\57\1\221\4\57"+
    "\4\0\1\235\1\0\2\4\66\0\7\43\1\0\4\4"+
    "\54\0\1\4\1\43\2\44\4\43\11\0\1\130\16\0"+
    "\1\2\2\0\1\136\3\0\1\2\1\236\4\0\1\137"+
    "\1\237\1\0\1\240\10\0\1\240\3\43\1\241\1\242"+
    "\2\43\23\0\1\243\3\0\1\244\2\0\1\245\1\205"+
    "\5\0\1\246\3\0\1\206\1\0\1\247\12\0\3\43"+
    "\1\250\1\251\2\43\35\0\1\144\2\0\1\252\21\0"+
    "\5\43\1\253\1\43\46\0\1\2\42\0\1\254\70\0"+
    "\1\255\51\0\4\256\10\0\1\257\3\0\1\260\37\0"+
    "\1\256\1\261\2\262\4\261\23\0\1\55\31\57\4\0"+
    "\1\57\32\0\16\57\1\263\13\57\4\0\1\57\32\0"+
    "\32\57\4\0\1\57\32\0\23\57\1\170\6\57\4\0"+
    "\1\57\32\0\1\264\31\57\4\0\1\57\32\0\13\57"+
    "\1\62\1\265\5\57\1\266\7\57\4\0\1\57\4\0"+
    "\1\267\25\0\3\57\1\62\24\57\1\270\1\57\4\0"+
    "\1\57\32\0\4\57\1\133\25\57\4\0\1\57\32\0"+
    "\1\57\1\66\30\57\4\0\1\57\32\0\2\57\1\271"+
    "\1\57\1\171\1\272\2\57\1\273\2\57\1\274\7\57"+
    "\1\275\6\57\4\0\1\57\3\0\1\276\26\0\23\57"+
    "\1\231\6\57\4\0\1\57\32\0\23\57\1\62\6\57"+
    "\4\0\1\57\32\0\15\57\1\277\14\57\4\0\1\57"+
    "\32\0\2\57\1\73\27\57\4\0\1\57\32\0\1\300"+
    "\31\57\4\0\1\57\32\0\14\57\1\135\7\57\1\301"+
    "\5\57\4\0\1\57\32\0\3\57\1\76\26\57\4\0"+
    "\1\57\32\0\3\57\1\133\26\57\4\0\1\57\32\0"+
    "\4\57\1\222\3\57\1\273\4\57\1\302\10\57\1\171"+
    "\3\57\4\0\1\57\3\0\1\276\26\0\21\57\1\303"+
    "\10\57\4\0\1\57\35\0\1\137\65\0\2\57\1\231"+
    "\27\57\4\0\1\57\32\0\4\57\1\104\25\57\4\0"+
    "\1\57\32\0\22\57\1\135\7\57\4\0\1\57\4\0"+
    "\1\240\25\0\2\57\1\62\27\57\4\0\1\57\32\0"+
    "\4\57\1\171\25\57\4\0\1\57\32\0\26\57\1\62"+
    "\3\57\4\0\1\57\32\0\5\57\1\111\24\57\4\0"+
    "\1\57\32\0\13\57\1\304\16\57\4\0\1\57\32\0"+
    "\13\57\1\305\5\57\1\62\10\57\4\0\1\57\32\0"+
    "\16\57\1\306\13\57\4\0\1\57\32\0\17\57\1\307"+
    "\12\57\4\0\1\57\32\0\21\57\1\310\10\57\4\0"+
    "\1\57\45\0\1\311\55\0\6\57\1\120\23\57\4\0"+
    "\1\57\32\0\1\55\2\57\1\133\16\57\1\133\2\57"+
    "\1\312\4\57\4\0\1\312\4\0\1\137\13\0\1\313"+
    "\11\0\3\57\1\62\15\57\1\314\1\62\7\57\4\0"+
    "\1\57\4\0\1\2\25\0\7\57\1\123\22\57\4\0"+
    "\1\57\32\0\14\57\1\156\5\57\1\62\7\57\4\0"+
    "\1\57\4\0\1\2\25\0\26\57\1\315\3\57\4\0"+
    "\1\57\32\0\23\57\1\316\6\57\4\0\1\57\46\0"+
    "\1\317\5\0\1\2\20\0\1\2\30\0\1\2\7\0"+
    "\1\320\1\2\10\0\1\240\10\0\1\240\32\0\10\57"+
    "\1\131\21\57\4\0\1\57\3\0\1\136\26\0\23\57"+
    "\1\266\6\57\4\0\1\57\32\0\15\57\1\302\14\57"+
    "\4\0\1\57\20\0\1\321\11\0\22\57\1\322\7\57"+
    "\4\0\1\57\4\0\1\323\25\0\4\57\1\62\25\57"+
    "\4\0\1\57\42\0\1\136\31\0\1\136\43\0\1\324"+
    "\53\0\11\57\1\140\20\57\4\0\1\57\32\0\22\57"+
    "\1\71\7\57\4\0\1\57\4\0\1\50\25\0\12\57"+
    "\1\142\17\57\4\0\1\57\5\0\1\144\24\0\4\57"+
    "\1\110\11\57\1\325\13\57\4\0\1\57\44\0\1\144"+
    "\31\0\1\144\24\0\23\57\1\326\6\57\4\0\1\57"+
    "\32\0\12\57\1\327\17\57\4\0\1\57\5\0\1\330"+
    "\24\0\13\57\1\147\16\57\4\0\1\57\32\0\13\57"+
    "\1\62\16\57\4\0\1\57\44\0\1\330\31\0\1\330"+
    "\24\0\15\57\1\331\12\57\1\332\1\57\4\0\1\57"+
    "\32\0\14\57\1\153\15\57\4\0\1\57\32\0\21\57"+
    "\1\135\1\71\7\57\4\0\1\57\4\0\1\50\25\0"+
    "\2\57\1\231\17\57\1\333\7\57\4\0\1\57\4\0"+
    "\1\334\25\0\22\57\1\335\7\57\4\0\1\57\4\0"+
    "\1\336\25\0\4\57\1\337\25\57\4\0\1\57\32\0"+
    "\15\57\1\160\14\57\4\0\1\57\32\0\21\57\1\62"+
    "\1\57\1\62\6\57\4\0\1\57\32\0\25\57\1\340"+
    "\4\57\4\0\1\340\32\0\5\57\1\62\24\57\4\0"+
    "\1\57\32\0\2\57\1\135\10\57\1\331\16\57\4\0"+
    "\1\57\32\0\16\57\1\165\13\57\4\0\1\57\32\0"+
    "\7\57\1\170\22\57\4\0\1\57\32\0\6\57\1\341"+
    "\12\57\1\342\1\57\1\62\6\57\4\0\1\57\32\0"+
    "\4\57\1\343\25\57\4\0\1\57\32\0\15\57\1\62"+
    "\14\57\4\0\1\57\32\0\17\57\1\172\12\57\4\0"+
    "\1\57\32\0\20\57\1\173\11\57\4\0\1\57\32\0"+
    "\16\57\1\71\13\57\4\0\1\57\32\0\1\344\31\57"+
    "\4\0\1\57\32\0\21\57\1\176\10\57\4\0\1\57"+
    "\32\0\14\57\1\135\15\57\4\0\1\57\32\0\15\57"+
    "\1\105\14\57\4\0\1\57\32\0\1\345\3\57\1\346"+
    "\11\57\1\347\13\57\4\0\1\57\32\0\14\57\1\350"+
    "\1\351\14\57\4\0\1\57\32\0\14\57\1\352\15\57"+
    "\4\0\1\57\32\0\22\57\1\204\7\57\4\0\1\57"+
    "\4\0\1\206\41\0\1\353\1\354\75\0\1\206\20\0"+
    "\1\206\25\0\1\355\3\57\1\356\3\57\1\357\5\57"+
    "\1\105\2\57\1\360\10\57\4\0\1\57\3\0\1\361"+
    "\26\0\16\57\1\62\13\57\4\0\1\57\32\0\24\57"+
    "\1\135\3\57\1\62\1\57\4\0\1\57\32\0\23\57"+
    "\1\212\6\57\4\0\1\57\32\0\10\57\1\351\21\57"+
    "\4\0\1\57\3\0\1\354\26\0\3\57\1\170\7\57"+
    "\1\362\7\57\1\363\6\57\4\0\1\57\32\0\4\57"+
    "\1\364\25\57\4\0\1\57\32\0\24\57\1\216\5\57"+
    "\4\0\1\57\36\0\1\365\64\0\21\57\1\331\10\57"+
    "\4\0\1\57\32\0\25\57\1\221\4\57\4\0\1\221"+
    "\32\0\22\57\1\133\7\57\4\0\1\57\4\0\1\137"+
    "\13\0\1\366\11\0\3\57\1\62\15\57\1\65\3\57"+
    "\1\135\4\57\4\0\1\135\32\0\1\367\3\57\1\370"+
    "\3\57\1\371\5\57\1\372\11\57\1\315\1\57\4\0"+
    "\1\57\3\0\1\373\26\0\13\57\1\150\7\57\1\374"+
    "\6\57\4\0\1\57\32\0\15\57\1\302\6\57\1\301"+
    "\5\57\4\0\1\57\32\0\26\57\1\227\3\57\4\0"+
    "\1\57\45\0\1\320\7\0\1\375\45\0\7\57\1\62"+
    "\22\57\4\0\1\57\32\0\1\231\21\57\2\62\6\57"+
    "\4\0\1\57\4\0\1\2\25\0\24\57\1\376\5\57"+
    "\4\0\1\57\32\0\30\57\1\234\1\57\4\0\1\57"+
    "\10\0\4\4\16\0\25\57\1\221\4\57\4\0\1\235"+
    "\1\0\2\4\52\0\1\267\33\0\1\321\33\0\1\323"+
    "\20\0\1\323\31\0\1\2\74\0\1\136\26\0\3\43"+
    "\1\241\3\43\40\0\1\324\21\0\7\43\37\0\1\240"+
    "\71\0\1\377\53\0\1\u0100\3\0\1\u0101\11\0\1\u0102"+
    "\66\0\1\u0103\56\0\1\u0104\102\0\1\353\1\354\21\0"+
    "\7\43\45\0\1\206\14\0\4\43\1\251\2\43\27\0"+
    "\1\u0105\11\0\1\u0106\64\0\1\144\24\0\5\43\1\253"+
    "\1\43\16\0\1\u0107\4\0\32\u0107\3\0\2\u0107\25\0"+
    "\1\u0108\4\0\32\u0108\3\0\2\u0108\10\0\4\256\10\0"+
    "\1\257\3\0\1\u0109\37\0\1\256\1\0\2\256\21\0"+
    "\1\u010a\3\0\1\u010b\65\0\1\u010c\2\0\1\260\1\u010d"+
    "\63\0\1\257\3\0\1\u0109\40\0\7\261\1\0\4\256"+
    "\10\0\1\257\3\0\1\u0109\37\0\1\256\1\261\2\262"+
    "\4\261\23\0\24\57\1\71\1\135\4\57\4\0\1\135"+
    "\32\0\10\57\1\u010e\21\57\4\0\1\57\3\0\1\u010f"+
    "\26\0\16\57\1\141\13\57\4\0\1\57\50\0\1\2"+
    "\52\0\23\57\1\u0110\6\57\4\0\1\57\32\0\1\u0111"+
    "\31\57\4\0\1\57\32\0\16\57\1\u0112\13\57\4\0"+
    "\1\57\32\0\15\57\1\u0113\14\57\4\0\1\57\32\0"+
    "\16\57\1\110\13\57\4\0\1\57\32\0\26\57\1\u0114"+
    "\3\57\4\0\1\57\47\0\1\u0115\41\0\1\50\11\0"+
    "\15\57\1\174\5\57\1\62\6\57\4\0\1\57\32\0"+
    "\15\57\1\u0116\14\57\4\0\1\57\32\0\13\57\1\77"+
    "\16\57\4\0\1\57\20\0\1\50\11\0\23\57\1\62"+
    "\6\57\4\0\1\57\32\0\10\57\1\273\21\57\4\0"+
    "\1\57\3\0\1\276\26\0\4\57\1\307\25\57\4\0"+
    "\1\57\32\0\13\57\1\u0117\16\57\4\0\1\57\32\0"+
    "\14\57\1\62\15\57\4\0\1\57\31\0\1\u0118\32\57"+
    "\4\0\1\57\32\0\23\57\1\166\6\57\4\0\1\57"+
    "\36\0\1\u0119\64\0\4\57\1\133\3\57\1\273\21\57"+
    "\4\0\1\57\3\0\1\276\31\0\1\2\7\0\1\320"+
    "\6\0\1\2\20\0\1\2\25\0\4\57\1\315\15\57"+
    "\1\322\7\57\4\0\1\57\4\0\1\323\13\0\1\361"+
    "\11\0\22\57\1\62\7\57\4\0\1\57\4\0\1\2"+
    "\25\0\17\57\1\u011a\12\57\4\0\1\57\54\0\1\336"+
    "\20\0\1\336\40\0\1\2\70\0\1\320\6\0\1\2"+
    "\20\0\1\2\25\0\4\57\1\u011b\25\57\4\0\1\57"+
    "\36\0\1\u011c\52\0\1\50\34\0\1\2\45\0\26\57"+
    "\1\u011d\3\57\4\0\1\57\20\0\1\361\11\0\32\57"+
    "\4\0\1\57\32\0\4\57\1\u011e\25\57\4\0\1\57"+
    "\36\0\1\u011f\64\0\30\57\1\62\1\57\4\0\1\57"+
    "\32\0\1\57\1\135\30\57\4\0\1\57\32\0\23\57"+
    "\1\u0120\6\57\4\0\1\57\55\0\1\u0121\45\0\3\57"+
    "\1\62\26\57\4\0\1\57\32\0\10\57\1\u0122\21\57"+
    "\4\0\1\57\3\0\1\u0123\26\0\7\57\1\71\22\57"+
    "\4\0\1\57\32\0\22\57\1\u0124\7\57\4\0\1\57"+
    "\4\0\1\u0125\25\0\21\57\1\62\10\57\4\0\1\57"+
    "\32\0\13\57\1\u0126\16\57\4\0\1\57\32\0\15\57"+
    "\1\u0127\14\57\4\0\1\57\20\0\1\313\11\0\22\57"+
    "\1\62\7\57\4\0\1\57\4\0\1\2\25\0\24\57"+
    "\1\301\5\57\4\0\1\57\32\0\17\57\1\u0126\12\57"+
    "\4\0\1\57\32\0\2\57\1\135\27\57\4\0\1\57"+
    "\32\0\4\57\1\270\25\57\4\0\1\57\51\0\1\u0128"+
    "\53\0\1\240\66\0\15\57\1\62\5\57\1\315\6\57"+
    "\4\0\1\57\10\0\4\u0129\16\0\10\57\1\u012a\3\57"+
    "\1\u012b\1\62\3\57\1\u012c\1\135\5\57\1\u012d\1\57"+
    "\4\0\1\u012e\1\u012f\2\u0130\1\u0131\1\u0132\2\u012f\23\0"+
    "\22\57\1\62\7\57\4\0\1\57\4\0\1\2\25\0"+
    "\16\57\1\u0133\13\57\4\0\1\57\54\0\1\2\20\0"+
    "\1\2\25\0\4\57\1\u0134\25\57\4\0\1\57\32\0"+
    "\10\57\1\150\21\57\4\0\1\57\3\0\1\320\31\0"+
    "\1\2\70\0\1\2\7\0\1\320\5\0\1\240\3\0"+
    "\1\240\10\0\1\240\32\0\23\57\1\315\6\57\4\0"+
    "\1\57\32\0\15\57\1\u0135\3\57\1\u0136\10\57\4\0"+
    "\1\57\32\0\2\57\1\231\10\57\1\135\16\57\4\0"+
    "\1\57\20\0\1\361\11\0\14\57\1\62\5\57\1\62"+
    "\7\57\4\0\1\57\4\0\1\2\27\0\1\u0104\10\0"+
    "\1\240\55\0\7\57\1\u0137\22\57\4\0\1\57\41\0"+
    "\1\u0138\47\0\1\366\11\0\3\57\1\62\7\57\1\150"+
    "\5\57\1\u0139\3\57\1\135\4\57\4\0\1\135\54\0"+
    "\1\240\20\0\1\240\42\0\1\u013a\41\0\1\313\33\0"+
    "\1\2\20\0\1\2\51\0\1\u013b\50\0\1\u013c\73\0"+
    "\1\2\107\0\1\2\70\0\1\u013d\34\0\1\u013e\1\u0108"+
    "\4\0\32\u0108\3\0\2\u0108\30\0\1\u0109\1\u010d\63\0"+
    "\1\u013f\1\u0140\4\0\32\u0140\1\u0141\2\0\2\u0140\25\0"+
    "\1\u0142\2\0\1\u010b\70\0\1\u0143\70\0\1\u0144\72\0"+
    "\15\57\1\u0145\14\57\4\0\1\57\47\0\1\u0146\53\0"+
    "\7\57\1\303\22\57\4\0\1\57\32\0\24\57\1\105"+
    "\5\57\4\0\1\57\32\0\21\57\1\135\10\57\4\0"+
    "\1\57\32\0\6\57\1\62\23\57\4\0\1\57\32\0"+
    "\4\57\1\107\25\57\4\0\1\57\40\0\1\2\62\0"+
    "\6\57\1\u0147\23\57\4\0\1\57\32\0\16\57\1\u0148"+
    "\13\57\4\0\1\57\27\0\1\u0149\72\0\1\u0118\70\0"+
    "\1\u0118\22\57\1\307\7\57\4\0\1\57\4\0\1\u0119"+
    "\25\0\13\57\1\u014a\16\57\4\0\1\57\45\0\1\u014b"+
    "\55\0\13\57\1\331\16\57\4\0\1\57\45\0\1\u014c"+
    "\55\0\16\57\1\u014d\13\57\4\0\1\57\50\0\1\u014e"+
    "\52\0\4\57\1\u014f\25\57\4\0\1\57\36\0\1\u0150"+
    "\52\0\1\50\11\0\32\57\4\0\1\57\10\0\4\u0129"+
    "\17\0\1\u0151\34\0\1\u0129\1\0\2\u0129\27\0\21\57"+
    "\1\u011d\10\57\4\0\1\57\32\0\22\57\1\u0152\7\57"+
    "\4\0\1\57\4\0\1\u0153\25\0\4\57\1\315\25\57"+
    "\4\0\1\57\20\0\1\366\11\0\3\57\1\62\7\57"+
    "\1\150\5\57\1\135\3\57\1\135\4\57\4\0\1\135"+
    "\10\0\4\u0129\16\0\1\57\1\u0154\30\57\4\0\1\u012e"+
    "\1\0\2\u0129\30\0\1\u0151\35\0\7\u012f\1\0\4\u0129"+
    "\17\0\1\u0151\34\0\1\u0129\1\u012f\2\u0130\4\u012f\24\0"+
    "\1\u0151\17\0\1\u013d\15\0\7\u012f\24\0\1\u0151\2\0"+
    "\1\2\32\0\7\u012f\23\0\24\57\1\u0155\5\57\4\0"+
    "\1\57\32\0\22\57\1\357\7\57\4\0\1\57\4\0"+
    "\1\361\25\0\4\57\1\u0135\25\57\4\0\1\57\32\0"+
    "\10\57\1\171\5\57\1\u0156\13\57\4\0\1\57\3\0"+
    "\1\u0157\36\0\1\u0157\5\0\1\u0158\23\0\1\u0157\26\0"+
    "\4\57\1\62\15\57\1\u0159\7\57\4\0\1\57\4\0"+
    "\1\u015a\13\0\1\50\115\0\1\102\100\0\1\u015b\23\0"+
    "\4\u015c\54\0\1\u015c\1\u015d\2\u015e\4\u015d\15\0\1\u015f"+
    "\1\u013f\4\0\32\u013f\3\0\2\u013f\24\0\1\u013f\1\u0140"+
    "\4\0\32\u0140\3\0\2\u0140\35\0\1\u0160\63\0\1\u0161"+
    "\65\0\1\u0162\2\0\1\u0143\70\0\1\u0144\1\u0163\113\0"+
    "\1\50\20\0\1\50\25\0\4\57\1\u0164\25\57\4\0"+
    "\1\57\32\0\26\57\1\u0165\3\57\4\0\1\57\27\0"+
    "\1\u0166\100\0\1\2\113\0\1\2\40\0\24\57\1\u0167"+
    "\5\57\4\0\1\57\56\0\1\u0168\44\0\13\57\1\u0169"+
    "\16\57\4\0\1\57\45\0\1\u016a\65\0\1\u016b\31\0"+
    "\1\u016b\26\0\10\57\1\u016c\21\57\4\0\1\57\3\0"+
    "\1\u016b\26\0\6\57\1\231\23\57\4\0\1\57\32\0"+
    "\24\57\1\71\5\57\4\0\1\57\47\0\1\2\77\0"+
    "\1\50\44\0\4\57\1\u016d\25\57\4\0\1\57\36\0"+
    "\1\u016e\73\0\1\u016f\37\0\4\u015c\11\0\1\u0170\4\0"+
    "\36\u0170\1\u0171\1\0\2\u015c\22\0\1\u0170\4\0\37\u0170"+
    "\7\u015d\1\0\4\u015c\11\0\1\u0170\4\0\36\u0170\1\u0171"+
    "\1\u015d\2\u015e\4\u015d\15\0\1\u0172\3\0\1\u015f\76\0"+
    "\1\u0173\57\0\1\u0174\2\0\1\u0161\70\0\1\u0175\70\0"+
    "\1\u0176\72\0\23\57\1\u0177\6\57\4\0\1\57\10\0"+
    "\4\u0178\16\0\32\57\4\0\1\u0179\1\u017a\2\u017b\4\u017a"+
    "\5\0\1\u0166\1\u017c\1\0\1\u017c\4\0\1\u0166\1\u017c"+
    "\1\u0166\2\u017c\1\u0166\32\u017c\3\0\2\u017c\32\0\22\57"+
    "\1\u011e\7\57\4\0\1\57\4\0\1\u011f\47\0\1\u011f"+
    "\20\0\1\u011f\25\0\25\57\1\u017d\4\57\4\0\1\u017d"+
    "\57\0\1\u017e\10\0\1\u017e\55\0\1\u017f\45\0\23\57"+
    "\1\u0180\6\57\4\0\1\57\32\0\13\57\1\u0181\16\57"+
    "\4\0\1\57\45\0\1\u0182\65\0\1\276\31\0\1\276"+
    "\4\0\4\u0183\11\0\1\u0170\4\0\36\u0170\1\u0184\1\u0185"+
    "\2\u0186\4\u0185\1\0\4\u0187\11\0\1\u0170\4\0\36\u0170"+
    "\1\u0188\1\u0185\2\u0188\4\u0185\16\0\1\u0189\2\0\1\u018a"+
    "\105\0\1\u018b\53\0\1\u018c\50\0\4\256\10\0\1\257"+
    "\3\0\1\u018d\37\0\1\256\1\261\2\262\4\261\15\0"+
    "\1\257\3\0\1\u0176\72\0\10\57\1\u018e\21\57\4\0"+
    "\1\57\3\0\1\u018f\4\0\4\u0178\32\0\1\u0190\21\0"+
    "\1\u0178\1\0\2\u0178\5\0\4\u0178\16\0\14\57\1\u0191"+
    "\15\57\4\0\1\u0179\1\0\2\u0178\43\0\1\u0190\22\0"+
    "\7\u017a\1\0\4\u0178\32\0\1\u0190\21\0\1\u0178\1\u017a"+
    "\2\u017b\4\u017a\23\0\4\57\1\357\25\57\4\0\1\57"+
    "\36\0\1\361\66\0\1\u0192\66\0\2\57\1\u0193\27\57"+
    "\4\0\1\57\32\0\5\57\1\62\17\57\1\u017d\4\57"+
    "\4\0\1\u017d\37\0\1\2\17\0\1\u017e\10\0\1\u017e"+
    "\10\0\4\u0183\44\0\1\u0194\7\0\1\u0183\1\0\2\u0183"+
    "\5\0\4\u0183\11\0\1\u0170\4\0\26\u0170\1\u0195\7\u0170"+
    "\1\u0184\1\u0185\2\u0186\4\u0185\51\0\1\u0194\10\0\7\u0185"+
    "\1\0\4\u0183\44\0\1\u0194\7\0\1\u0183\1\u0185\2\u0186"+
    "\4\u0185\1\0\4\u0187\11\0\1\u0170\4\0\26\u0170\1\u0195"+
    "\7\u0170\1\u0188\1\0\2\u0187\5\0\4\u0187\11\0\1\u0170"+
    "\4\0\26\u0170\1\u0195\7\u0170\1\u0188\1\u0185\2\u0188\4\u0185"+
    "\21\0\1\u018a\66\0\1\u0196\1\0\1\u018a\76\0\1\u0197"+
    "\56\0\1\u010a\3\0\1\u018c\50\0\4\256\10\0\1\257"+
    "\3\0\1\u018d\1\u010d\36\0\1\256\1\261\2\262\4\261"+
    "\23\0\17\57\1\u0198\12\57\4\0\1\57\51\0\1\u0199"+
    "\55\0\1\u019a\64\0\4\57\1\u019b\25\57\4\0\1\57"+
    "\50\0\1\u019c\52\0\16\57\1\u019d\13\57\4\0\1\57"+
    "\32\0\1\u019e\46\0\4\u0183\11\0\1\u0170\4\0\1\u019f"+
    "\35\u0170\1\u0184\1\u0185\2\u0186\4\u0185\15\0\1\u01a0\3\0"+
    "\1\u0196\115\0\1\u01a1\23\0\4\u01a2\16\0\32\57\4\0"+
    "\1\u01a3\1\u01a4\2\u01a5\4\u01a4\1\0\4\u01a2\54\0\1\u01a2"+
    "\1\u01a4\2\u01a5\4\u01a4\1\0\4\u01a6\54\0\1\u01a6\1\u01a7"+
    "\2\u01a8\4\u01a7\1\0\4\u01a6\16\0\32\57\4\0\1\u01a9"+
    "\1\u01a7\2\u01a8\4\u01a7\33\0\1\u01aa\31\0\1\u01aa\26\0"+
    "\10\57\1\u01ab\21\57\4\0\1\57\3\0\1\u01aa\43\0"+
    "\1\u01ac\31\0\4\u0183\11\0\1\u0170\4\0\15\u0170\1\u01ad"+
    "\20\u0170\1\u0184\1\u0185\2\u0186\4\u0185\15\0\1\2\3\0"+
    "\1\u01a0\76\0\1\u01ae\42\0\4\u01a2\26\0\1\u01af\14\0"+
    "\1\u01b0\10\0\1\u01b1\1\0\2\u01a2\1\u01af\4\0\4\u01a2"+
    "\16\0\10\57\1\u01b2\14\57\1\u01b3\4\57\4\0\1\u01b4"+
    "\1\0\2\u01a2\1\u01af\36\0\1\u01af\14\0\1\u01b0\10\0"+
    "\1\u01b0\3\u01a4\1\u01b5\3\u01a4\1\0\4\u01a2\26\0\1\u01af"+
    "\14\0\1\u01b0\10\0\1\u01b1\1\u01a4\2\u01a5\1\u01b5\3\u01a4"+
    "\1\0\4\u01a6\41\0\1\u01b6\12\0\1\u01a6\1\0\2\u01a6"+
    "\52\0\1\u01b6\13\0\7\u01a7\1\0\4\u01a6\41\0\1\u01b6"+
    "\12\0\1\u01a6\1\u01a7\2\u01a8\4\u01a7\1\0\4\u01a6\16\0"+
    "\23\57\1\u01b7\6\57\4\0\1\u01a9\1\0\2\u01a6\44\0"+
    "\1\u01b8\53\0\15\57\1\u01b9\14\57\4\0\1\57\55\0"+
    "\1\u01ba\23\0\4\u0183\11\0\1\u0170\4\0\23\u0170\1\u01bb"+
    "\12\u0170\1\u0184\1\u0185\2\u0186\4\u0185\26\0\1\u01bc\102\0"+
    "\1\u01bd\63\0\1\u01be\31\0\1\u01be\4\0\4\u01a2\26\0"+
    "\1\u01bf\14\0\1\u01b0\10\0\1\u01b1\1\0\2\u01a2\1\u01bf"+
    "\26\0\15\57\1\u01c0\14\57\4\0\1\57\32\0\10\57"+
    "\1\u01c1\21\57\4\0\1\57\3\0\1\u01be\4\0\4\u01a2"+
    "\16\0\10\57\1\u01c2\14\57\1\u01b3\4\57\4\0\1\u01b4"+
    "\1\0\2\u01a2\1\u01bf\36\0\1\u01af\4\0\1\u01bd\7\0"+
    "\1\u01b0\10\0\1\u01b0\3\u01a4\1\u01b5\3\u01a4\41\0\1\u01c3"+
    "\52\0\16\57\1\u01c4\13\57\4\0\1\57\10\0\4\u01c5"+
    "\54\0\1\u01c5\1\u01c6\2\u01c7\4\u01c6\1\0\4\u01c5\16\0"+
    "\32\57\4\0\1\u01c8\1\u01c6\2\u01c7\4\u01c6\45\0\1\u01c9"+
    "\20\0\1\u01c9\3\0\4\u0183\11\0\1\u0170\4\0\22\u0170"+
    "\1\u01ca\13\u0170\1\u0184\1\u0185\2\u0186\1\u0185\1\u01cb\2\u0185"+
    "\57\0\1\u01cc\41\0\1\267\66\0\1\u01cd\70\0\1\u01cd"+
    "\11\0\1\u01bd\53\0\5\57\1\266\24\57\4\0\1\57"+
    "\32\0\3\57\1\u01ce\26\57\4\0\1\57\32\0\3\57"+
    "\1\u01ce\11\57\1\u01c0\14\57\4\0\1\57\10\0\4\u01cf"+
    "\54\0\1\u01cf\1\u01d0\2\u01d1\4\u01d0\1\0\4\u01cf\16\0"+
    "\32\57\4\0\1\u01d2\1\u01d0\2\u01d1\4\u01d0\1\0\4\u01c5"+
    "\41\0\1\u01d3\12\0\1\u01c5\1\0\2\u01c5\52\0\1\u01d3"+
    "\13\0\7\u01c6\1\0\4\u01c5\41\0\1\u01d3\12\0\1\u01c5"+
    "\1\u01c6\2\u01c7\4\u01c6\1\0\4\u01c5\16\0\23\57\1\u01d4"+
    "\6\57\4\0\1\u01c8\1\0\2\u01c5\5\0\4\u01d5\54\0"+
    "\1\u01d5\1\u01d6\2\u01d7\4\u01d6\1\0\4\u01d8\11\0\1\u0170"+
    "\4\0\36\u0170\1\u01d9\1\u01da\2\u01db\4\u01da\1\0\4\u01d5"+
    "\44\0\1\u0194\7\0\1\u01d5\1\u01da\2\u01dc\4\u01da\15\0"+
    "\1\u013f\102\0\1\267\64\0\4\57\1\266\25\57\4\0"+
    "\1\57\10\0\4\u01cf\7\0\1\u01dd\44\0\1\u01cf\1\0"+
    "\2\u01cf\20\0\1\u01dd\45\0\7\u01d0\1\0\4\u01cf\7\0"+
    "\1\u01dd\44\0\1\u01cf\1\u01d0\2\u01d1\4\u01d0\1\0\4\u01cf"+
    "\7\0\1\u01dd\6\0\32\57\4\0\1\u01d2\1\0\2\u01cf"+
    "\37\0\1\u01de\31\0\1\u01de\26\0\10\57\1\u01df\21\57"+
    "\4\0\1\57\3\0\1\u01de\4\0\4\u01d5\41\0\1\u01e0"+
    "\12\0\1\u01d5\1\0\2\u01d5\52\0\1\u01e0\13\0\7\u01d6"+
    "\1\0\4\u01d5\41\0\1\u01e0\12\0\1\u01d5\1\u01d6\2\u01d7"+
    "\4\u01d6\1\0\4\u01d8\41\0\1\u01e0\2\0\1\u0194\7\0"+
    "\1\u01d8\1\0\2\u01d8\5\0\4\u01d8\11\0\1\u0170\4\0"+
    "\23\u0170\1\u01e1\2\u0170\1\u0195\7\u0170\1\u01d9\1\u0185\2\u01e2"+
    "\4\u0185\46\0\1\u01e0\2\0\1\u0194\10\0\7\u01da\1\0"+
    "\4\u01d8\41\0\1\u01e0\2\0\1\u0194\7\0\1\u01d8\1\u01da"+
    "\2\u01db\4\u01da\1\0\4\u01d5\41\0\1\u01e0\2\0\1\u0194"+
    "\7\0\1\u01d5\1\u01da\2\u01dc\4\u01da\14\0\1\u01e3\116\0"+
    "\1\u01e4\51\0\17\57\1\u01e5\12\57\4\0\1\57\50\0"+
    "\1\u01e6\30\0\4\u0183\11\0\1\u0170\4\0\16\u0170\1\u01e7"+
    "\17\u0170\1\u0184\1\u0185\2\u0186\4\u0185\1\0\4\u01d8\41\0"+
    "\1\u01e0\2\0\1\u0194\7\0\1\u01d8\1\u0185\2\u01e2\4\u0185"+
    "\55\0\1\u01e8\14\0\4\u01e9\54\0\1\u01e9\1\u01ea\2\u01eb"+
    "\4\u01ea\1\0\4\u01e9\16\0\32\57\4\0\1\u01ec\1\u01ea"+
    "\2\u01eb\4\u01ea\1\0\4\u01ed\54\0\1\u01ed\1\u01ee\2\u01ef"+
    "\4\u01ee\1\0\4\u01f0\11\0\1\u0170\4\0\36\u0170\1\u01f1"+
    "\1\u01f2\2\u01f3\4\u01f2\25\0\1\u01f4\44\0\4\u01e9\23\0"+
    "\1\u01f5\30\0\1\u01e9\1\0\2\u01e9\34\0\1\u01f5\31\0"+
    "\7\u01ea\1\0\4\u01e9\23\0\1\u01f5\30\0\1\u01e9\1\u01ea"+
    "\2\u01eb\4\u01ea\1\0\4\u01e9\16\0\5\57\1\u01f6\24\57"+
    "\4\0\1\u01ec\1\0\2\u01e9\5\0\4\u01ed\40\0\1\u01f7"+
    "\13\0\1\u01ed\1\0\2\u01ed\1\0\1\u01f7\47\0\1\u01f7"+
    "\14\0\4\u01ee\1\u01f8\2\u01ee\1\0\4\u01ed\40\0\1\u01f7"+
    "\13\0\1\u01ed\1\u01ee\2\u01ef\1\u01ee\1\u01f8\2\u01ee\1\0"+
    "\4\u01f0\40\0\1\u01f7\3\0\1\u0194\7\0\1\u01f0\1\0"+
    "\2\u01f0\1\0\1\u01f7\3\0\4\u01f0\11\0\1\u0170\4\0"+
    "\22\u0170\1\u01f9\3\u0170\1\u0195\7\u0170\1\u01f1\1\u0185\2\u01fa"+
    "\1\u0185\1\u01fb\2\u0185\45\0\1\u01f7\3\0\1\u0194\10\0"+
    "\4\u01f2\1\u01fc\2\u01f2\1\0\4\u01f0\40\0\1\u01f7\3\0"+
    "\1\u0194\7\0\1\u01f0\1\u01f2\2\u01f3\1\u01f2\1\u01fc\2\u01f2"+
    "\41\0\1\u01fd\70\0\1\u01fe\52\0\16\57\1\u01ff\13\57"+
    "\4\0\1\57\36\0\1\u0200\70\0\1\u0200\15\0\1\u01f7"+
    "\14\0\4\u01ee\1\u01f8\2\u01ee\1\0\4\u0183\11\0\1\u0170"+
    "\4\0\4\u0170\1\u0201\31\u0170\1\u0184\1\u0185\2\u0186\4\u0185"+
    "\1\0\4\u01f0\40\0\1\u01f7\3\0\1\u0194\7\0\1\u01f0"+
    "\1\u0185\2\u01fa\1\u0185\1\u01fb\2\u0185\27\0\1\u0200\21\0"+
    "\1\u0194\10\0\7\u0185\27\0\1\u0200\15\0\1\u01f7\3\0"+
    "\1\u0194\10\0\4\u01f2\1\u01fc\2\u01f2\36\0\1\u0202\76\0"+
    "\1\u0203\47\0\21\57\1\u0204\10\57\4\0\1\57\47\0"+
    "\1\u0205\31\0\4\u0183\11\0\1\u0170\4\0\15\u0170\1\u0206"+
    "\20\u0170\1\u0184\1\u0185\2\u0186\4\u0185\36\0\1\u0207\33\0"+
    "\4\u0208\54\0\1\u0208\1\u0209\2\u020a\4\u0209\1\0\4\u0208"+
    "\16\0\32\57\4\0\1\u020b\1\u0209\2\u020a\4\u0209\26\0"+
    "\1\u020c\43\0\4\u0183\11\0\1\u0170\4\0\3\u0170\1\u020d"+
    "\32\u0170\1\u0184\1\u0185\2\u0186\4\u0185\27\0\1\u020e\42\0"+
    "\4\u0208\14\0\1\u020f\37\0\1\u0208\1\0\2\u0208\25\0"+
    "\1\u020f\40\0\7\u0209\1\0\4\u0208\14\0\1\u020f\37\0"+
    "\1\u0208\1\u0209\2\u020a\4\u0209\1\0\4\u0208\14\0\1\u020f"+
    "\1\0\32\57\4\0\1\u020b\1\0\2\u0208\5\0\4\u0210"+
    "\54\0\1\u0210\1\u0211\2\u0212\4\u0211\1\0\4\u0213\11\0"+
    "\1\u0170\4\0\36\u0170\1\u0214\1\u0215\2\u0216\4\u0215\25\0"+
    "\1\u0217\44\0\4\u0218\14\0\1\u020f\37\0\1\u0218\1\u0219"+
    "\2\u021a\4\u0219\1\0\4\u0210\46\0\1\u021b\5\0\1\u0210"+
    "\1\0\2\u0210\57\0\1\u021b\6\0\7\u0211\1\0\4\u0210"+
    "\46\0\1\u021b\5\0\1\u0210\1\u0211\2\u0212\4\u0211\1\0"+
    "\4\u0213\44\0\1\u0194\1\0\1\u021b\5\0\1\u0213\1\0"+
    "\2\u0213\5\0\4\u0213\11\0\1\u0170\4\0\26\u0170\1\u0195"+
    "\1\u0170\1\u021c\5\u0170\1\u0214\1\u0185\2\u021d\4\u0185\51\0"+
    "\1\u0194\1\0\1\u021b\6\0\7\u0215\1\0\4\u0213\44\0"+
    "\1\u0194\1\0\1\u021b\5\0\1\u0213\1\u0215\2\u0216\4\u0215"+
    "\46\0\1\u021e\23\0\4\u0218\17\0\1\u021f\34\0\1\u0218"+
    "\1\0\2\u0218\30\0\1\u021f\35\0\7\u0219\1\0\4\u0218"+
    "\17\0\1\u021f\34\0\1\u0218\1\u0219\2\u021a\4\u0219\41\0"+
    "\1\u0220\30\0\4\u0183\11\0\1\u0170\4\0\16\u0170\1\u0221"+
    "\17\u0170\1\u0184\1\u0185\2\u0186\4\u0185\1\0\4\u0213\44\0"+
    "\1\u0194\1\0\1\u021b\5\0\1\u0213\1\u0185\2\u021d\4\u0185"+
    "\1\0\4\u0222\54\0\1\u0222\1\u0223\2\u0224\4\u0223\33\0"+
    "\1\u0225\31\0\1\u0225\52\0\1\u0226\22\0\4\u0183\11\0"+
    "\1\u0170\4\0\24\u0170\1\u0227\11\u0170\1\u0184\1\u0185\2\u0186"+
    "\4\u0185\1\0\4\u0222\26\0\1\u0228\25\0\1\u0222\1\0"+
    "\2\u0222\1\u0228\36\0\1\u0228\26\0\3\u0223\1\u0229\3\u0223"+
    "\1\0\4\u0222\26\0\1\u0228\25\0\1\u0222\1\u0223\2\u0224"+
    "\1\u0229\3\u0223\46\0\1\u022a\23\0\4\u022b\54\0\1\u022b"+
    "\1\u022c\2\u022d\4\u022c\1\0\4\u022e\11\0\1\u0170\4\0"+
    "\36\u0170\1\u022f\1\u0230\2\u0231\4\u0230\46\0\1\u0232\55\0"+
    "\1\u0228\12\0\1\u0232\13\0\3\u0223\1\u0229\3\u0223\45\0"+
    "\1\u0233\20\0\1\u0233\3\0\4\u022b\16\0\1\u0234\35\0"+
    "\1\u022b\1\0\2\u022b\27\0\1\u0234\36\0\7\u022c\1\0"+
    "\4\u022b\16\0\1\u0234\35\0\1\u022b\1\u022c\2\u022d\4\u022c"+
    "\1\0\4\u022e\16\0\1\u0234\25\0\1\u0194\7\0\1\u022e"+
    "\1\0\2\u022e\5\0\4\u022e\11\0\1\u0170\4\0\1\u0235"+
    "\25\u0170\1\u0195\7\u0170\1\u022f\1\u0185\2\u0236\4\u0185\23\0"+
    "\1\u0234\25\0\1\u0194\10\0\7\u0230\1\0\4\u022e\16\0"+
    "\1\u0234\25\0\1\u0194\7\0\1\u022e\1\u0230\2\u0231\4\u0230"+
    "\57\0\1\u0237\12\0\4\u0238\54\0\1\u0238\1\u0239\2\u023a"+
    "\4\u0239\1\0\4\u023b\54\0\1\u023b\1\u023c\2\u023d\4\u023c"+
    "\1\0\4\u023e\11\0\1\u0170\4\0\36\u0170\1\u023f\1\u0240"+
    "\2\u0241\4\u0240\1\0\4\u022e\16\0\1\u0234\25\0\1\u0194"+
    "\7\0\1\u022e\1\u0185\2\u0236\4\u0185\12\0\1\u0242\57\0"+
    "\4\u0238\5\0\1\u0243\46\0\1\u0238\1\0\2\u0238\16\0"+
    "\1\u0243\47\0\7\u0239\1\0\4\u0238\5\0\1\u0243\46\0"+
    "\1\u0238\1\u0239\2\u023a\4\u0239\1\0\4\u023b\17\0\1\u0244"+
    "\34\0\1\u023b\1\0\2\u023b\30\0\1\u0244\35\0\7\u023c"+
    "\1\0\4\u023b\17\0\1\u0244\34\0\1\u023b\1\u023c\2\u023d"+
    "\4\u023c\1\0\4\u023e\17\0\1\u0244\24\0\1\u0194\7\0"+
    "\1\u023e\1\0\2\u023e\5\0\4\u023e\11\0\1\u0170\4\0"+
    "\1\u0170\1\u0245\24\u0170\1\u0195\7\u0170\1\u023f\1\u0185\2\u0246"+
    "\4\u0185\24\0\1\u0244\24\0\1\u0194\10\0\7\u0240\1\0"+
    "\4\u023e\17\0\1\u0244\24\0\1\u0194\7\0\1\u023e\1\u0240"+
    "\2\u0241\4\u0240\30\0\1\u0247\1\0\1\u0248\45\0\1\u0249"+
    "\114\0\1\u024a\31\0\1\u024a\4\0\4\u0183\11\0\1\u0170"+
    "\4\0\10\u0170\1\u024b\25\u0170\1\u0184\1\u0185\2\u0186\1\u024c"+
    "\3\u0185\1\0\4\u023e\17\0\1\u0244\24\0\1\u0194\7\0"+
    "\1\u023e\1\u0185\2\u0246\4\u0185\33\0\1\u024d\12\0\1\u024e"+
    "\16\0\1\u024d\51\0\1\u024f\43\0\1\u0250\115\0\1\u0251"+
    "\23\0\4\u0183\11\0\1\u0170\4\0\23\u0170\1\u0252\12\u0170"+
    "\1\u0184\1\u0185\2\u0186\4\u0185\46\0\1\u0251\2\0\1\u0194"+
    "\10\0\7\u0185\36\0\1\u0253\74\0\1\u0254\74\0\1\u0255"+
    "\22\0\2\u0256\2\0\15\u0256\1\u0257\41\u0256\1\0\4\u0256"+
    "\26\0\1\u0258\44\0\4\u0183\11\0\1\u0170\4\0\2\u0170"+
    "\1\u0259\33\u0170\1\u0184\1\u0185\2\u0186\4\u0185\27\0\1\u0254"+
    "\63\0\1\u025a\110\0\1\u025b\47\0\1\u025c\47\0\2\u0256"+
    "\2\0\15\u0256\1\u025d\41\u0256\1\0\4\u0256\42\0\1\u025e"+
    "\30\0\4\u0183\11\0\1\u0170\4\0\16\u0170\1\u025f\17\u0170"+
    "\1\u0184\1\u0185\2\u0186\4\u0185\20\0\1\u0260\72\0\1\u025a"+
    "\22\0\1\u0254\20\0\1\u0254\15\0\1\u0261\5\0\1\u025c"+
    "\47\0\2\u0256\2\0\7\u0256\1\u0262\5\u0256\1\u025d\41\u0256"+
    "\1\0\4\u0256\34\0\1\u0263\31\0\1\u0263\4\0\4\u0183"+
    "\11\0\1\u0170\4\0\10\u0170\1\u0264\25\u0170\1\u0184\1\u0185"+
    "\2\u0186\1\u0265\3\u0185\20\0\1\u0266\51\0\4\u0267\54\0"+
    "\1\u0267\1\u0268\2\u0269\4\u0268\1\0\4\u0267\14\0\1\u025c"+
    "\37\0\1\u0267\1\u0268\2\u0269\4\u0268\40\0\1\u026a\31\0"+
    "\4\u0183\11\0\1\u0170\4\0\15\u0170\1\u026b\20\u0170\1\u0184"+
    "\1\u0185\2\u0186\4\u0185\40\0\1\u026a\10\0\1\u0194\10\0"+
    "\7\u0185\5\0\1\u0266\1\u026c\1\0\1\u026c\4\0\1\u0266"+
    "\1\u026c\1\u0266\2\u026c\1\u0266\32\u026c\3\0\2\u026c\10\0"+
    "\4\u0267\25\0\1\u026d\26\0\1\u0267\1\0\2\u0267\36\0"+
    "\1\u026d\27\0\7\u0268\1\0\4\u0267\25\0\1\u026d\26\0"+
    "\1\u0267\1\u0268\2\u0269\4\u0268\1\0\4\u026e\54\0\1\u026e"+
    "\1\u026f\2\u0270\4\u026f\1\0\4\u0271\11\0\1\u0170\4\0"+
    "\36\u0170\1\u0272\1\u0273\2\u0274\4\u0273\5\0\1\u0266\1\u026c"+
    "\1\0\1\u026c\2\0\1\u0275\1\0\1\u0266\1\u026c\1\u0266"+
    "\2\u026c\1\u0266\32\u026c\3\0\2\u026c\32\0\1\u0276\46\0"+
    "\4\u026e\41\0\1\u0277\12\0\1\u026e\1\0\2\u026e\52\0"+
    "\1\u0277\13\0\7\u026f\1\0\4\u026e\41\0\1\u0277\12\0"+
    "\1\u026e\1\u026f\2\u0270\4\u026f\1\0\4\u0271\41\0\1\u0277"+
    "\2\0\1\u0194\7\0\1\u0271\1\0\2\u0271\5\0\4\u0271"+
    "\11\0\1\u0170\4\0\23\u0170\1\u0278\2\u0170\1\u0195\7\u0170"+
    "\1\u0272\1\u0185\2\u0279\4\u0185\46\0\1\u0277\2\0\1\u0194"+
    "\10\0\7\u0273\1\0\4\u0271\41\0\1\u0277\2\0\1\u0194"+
    "\7\0\1\u0271\1\u0273\2\u0274\4\u0273\17\0\1\u027a\116\0"+
    "\1\u027b\20\0\1\u027b\35\0\1\u027c\31\0\1\u027c\4\0"+
    "\4\u0183\11\0\1\u0170\4\0\10\u0170\1\u027d\25\u0170\1\u0184"+
    "\1\u0185\2\u0186\1\u027e\3\u0185\1\0\4\u0271\41\0\1\u0277"+
    "\2\0\1\u0194\7\0\1\u0271\1\u0185\2\u0279\4\u0185\14\0"+
    "\1\u027f\55\0\4\u0280\54\0\1\u0280\1\u0281\2\u0282\4\u0281"+
    "\42\0\1\u0283\27\0\4\u0183\11\0\1\u0170\4\0\17\u0170"+
    "\1\u0284\16\u0170\1\u0184\1\u0185\2\u0186\4\u0185\42\0\1\u0283"+
    "\6\0\1\u0194\10\0\7\u0185\14\0\1\2\55\0\4\u0280"+
    "\17\0\1\u0285\34\0\1\u0280\1\0\2\u0280\30\0\1\u0285"+
    "\35\0\7\u0281\1\0\4\u0280\17\0\1\u0285\34\0\1\u0280"+
    "\1\u0281\2\u0282\4\u0281\1\0\4\u0286\54\0\1\u0286\1\u0287"+
    "\2\u0288\4\u0287\1\0\4\u0289\11\0\1\u0170\4\0\36\u0170"+
    "\1\u028a\1\u028b\2\u028c\4\u028b\27\0\1\u028d\42\0\4\u0286"+
    "\23\0\1\u028e\30\0\1\u0286\1\0\2\u0286\34\0\1\u028e"+
    "\31\0\7\u0287\1\0\4\u0286\23\0\1\u028e\30\0\1\u0286"+
    "\1\u0287\2\u0288\4\u0287\1\0\4\u0289\23\0\1\u028e\20\0"+
    "\1\u0194\7\0\1\u0289\1\0\2\u0289\5\0\4\u0289\11\0"+
    "\1\u0170\4\0\5\u0170\1\u028f\20\u0170\1\u0195\7\u0170\1\u028a"+
    "\1\u0185\2\u0290\4\u0185\30\0\1\u028e\20\0\1\u0194\10\0"+
    "\7\u028b\1\0\4\u0289\23\0\1\u028e\20\0\1\u0194\7\0"+
    "\1\u0289\1\u028b\2\u028c\4\u028b\27\0\1\u0291\102\0\1\u0292"+
    "\30\0\4\u0183\11\0\1\u0170\4\0\16\u0170\1\u0293\17\u0170"+
    "\1\u0184\1\u0185\2\u0186\4\u0185\1\0\4\u0289\23\0\1\u028e"+
    "\20\0\1\u0194\7\0\1\u0289\1\u0185\2\u0290\4\u0185\40\0"+
    "\1\u0294\74\0\1\u0295\25\0\4\u0183\11\0\1\u0170\4\0"+
    "\21\u0170\1\u0296\14\u0170\1\u0184\1\u0185\2\u0186\4\u0185\1\0"+
    "\4\u0297\54\0\1\u0297\1\u0298\2\u0299\4\u0298\1\0\4\u029a"+
    "\54\0\1\u029a\1\u029b\2\u029c\4\u029b\1\0\4\u029d\11\0"+
    "\1\u0170\4\0\36\u0170\1\u029e\1\u029f\2\u02a0\4\u029f\1\0"+
    "\4\u0297\20\0\1\u02a1\33\0\1\u0297\1\0\2\u0297\31\0"+
    "\1\u02a1\34\0\7\u0298\1\0\4\u0297\20\0\1\u02a1\33\0"+
    "\1\u0297\1\u0298\2\u0299\4\u0298\1\0\4\u029a\14\0\1\u02a2"+
    "\37\0\1\u029a\1\0\2\u029a\25\0\1\u02a2\40\0\7\u029b"+
    "\1\0\4\u029a\14\0\1\u02a2\37\0\1\u029a\1\u029b\2\u029c"+
    "\4\u029b\1\0\4\u029d\14\0\1\u02a2\27\0\1\u0194\7\0"+
    "\1\u029d\1\0\2\u029d\5\0\4\u029d\11\0\1\u0170\2\0"+
    "\1\u02a2\1\0\26\u0170\1\u0195\7\u0170\1\u029e\1\u0185\2\u02a3"+
    "\4\u0185\21\0\1\u02a2\27\0\1\u0194\10\0\7\u029f\1\0"+
    "\4\u029d\14\0\1\u02a2\27\0\1\u0194\7\0\1\u029d\1\u029f"+
    "\2\u02a0\4\u029f\41\0\1\u02a4\30\0\4\u02a5\14\0\1\u02a2"+
    "\37\0\1\u02a5\1\u02a6\2\u02a7\4\u02a6\1\0\4\u029d\14\0"+
    "\1\u02a2\27\0\1\u0194\7\0\1\u029d\1\u0185\2\u02a3\4\u0185"+
    "\36\0\1\u02a8\33\0\4\u02a5\17\0\1\u02a9\34\0\1\u02a5"+
    "\1\0\2\u02a5\30\0\1\u02a9\35\0\7\u02a6\1\0\4\u02a5"+
    "\17\0\1\u02a9\34\0\1\u02a5\1\u02a6\2\u02a7\4\u02a6\36\0"+
    "\1\u02aa\65\0\1\u02ab\31\0\1\u02ab\32\0\1\u02ac\107\0"+
    "\1\361\47\0\1\u02ad\111\0\1\u02ae\51\0\1\u02af\67\0"+
    "\1\u02b0\43\0\4\u02b1\54\0\1\u02b1\1\u02b2\2\u02b3\4\u02b2"+
    "\1\0\4\u02b1\17\0\1\u02b4\34\0\1\u02b1\1\0\2\u02b1"+
    "\30\0\1\u02b4\35\0\7\u02b2\1\0\4\u02b1\17\0\1\u02b4"+
    "\34\0\1\u02b1\1\u02b2\2\u02b3\4\u02b2\53\0\1\u02b5\16\0"+
    "\4\u02b6\54\0\1\u02b6\1\u02b7\2\u02b8\4\u02b7\1\0\4\u02b6"+
    "\7\0\1\u02b9\44\0\1\u02b6\1\0\2\u02b6\20\0\1\u02b9"+
    "\45\0\7\u02b7\1\0\4\u02b6\7\0\1\u02b9\44\0\1\u02b6"+
    "\1\u02b7\2\u02b8\4\u02b7\16\0\1\u02ba\4\0\37\u02ba\23\0"+
    "\1\2\1\0\1\u02ba\4\0\37\u02ba\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38646];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\45\1\5\0\25\1\1\0\14\1\1\0"+
    "\7\1\2\0\20\1\1\0\33\1\1\0\22\1\1\0"+
    "\7\1\1\0\2\1\3\0\1\1\1\0\2\1\1\0"+
    "\1\1\7\0\4\1\1\0\6\1\1\0\12\1\1\0"+
    "\1\1\1\0\4\1\2\0\2\1\1\0\3\1\1\0"+
    "\3\1\1\0\1\1\1\0\14\1\2\0\4\1\1\0"+
    "\4\1\1\0\4\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\5\0\2\1\5\0\1\1\1\0\5\1\1\0"+
    "\2\1\2\0\2\1\1\0\6\1\1\0\4\1\2\0"+
    "\5\1\4\0\7\1\2\0\2\1\7\0\4\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\3\1\2\0\2\1\11\0\2\1\1\0\1\1\1\0"+
    "\1\1\2\0\2\1\11\0\1\1\1\0\1\1\2\0"+
    "\2\1\2\0\2\1\14\0\1\1\2\0\1\1\1\0"+
    "\1\1\4\0\1\1\2\0\1\1\1\0\1\1\5\0"+
    "\1\1\5\0\1\1\1\0\1\1\6\0\3\1\2\0"+
    "\1\1\1\0\1\1\6\0\3\1\1\0\1\1\3\0"+
    "\1\1\5\0\1\1\3\0\1\1\1\0\1\1\12\0"+
    "\1\1\5\0\1\1\6\0\1\1\11\0\1\1\10\0"+
    "\1\1\4\0\1\1\6\0\1\1\257\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[698];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private FileWriter writer;

	private void writer(String buff){
		try {
            writer.write(buff);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  afiliado(java.io.Reader in) {
  	try{
		writer = new FileWriter("chunk-clean.txt", true);
	}catch(IOException e){
		e.printStackTrace();
	}
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
	try {
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 4: break;
          case 2:
            { writer(yytext());
            }
            // fall through
          case 5: break;
          case 3:
            { writer(" ");
            }
            // fall through
          case 6: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
