// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Documents/Concurrencia/Proyecto/Dataset 4/Comment-Cleaner.jflex

//10,11,25,60,2
//Mandenos un fichero correcto please ;_;
import java.io.FileWriter;
import java.io.IOException;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class afiliado {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\0\1\4"+
    "\1\5\1\4\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\3\1\13\1\3\1\14\12\15\1\16\1\3\1\0"+
    "\1\4\1\0\1\3\1\4\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\52\1\13\1\52\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\0\1\54"+
    "\1\0\1\4\6\0\1\2\32\0\1\1\217\0\2\55"+
    "\115\0\1\56\u0200\0\1\1\177\0\13\1\35\0\2\2"+
    "\5\0\1\1\57\0\1\1\312\0\1\57\325\0\1\1"+
    "\377\0\u0100\60";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\36\1\2\0\4\2"+
    "\1\1\1\2\1\1\1\2\2\1\3\2\1\1\1\2"+
    "\1\1\1\2\1\1\1\2\1\0\1\2\1\1\4\2"+
    "\1\1\5\2\1\0\4\1\3\2\2\0\4\1\1\2"+
    "\4\1\1\2\1\1\1\2\1\1\2\2\1\1\1\2"+
    "\1\0\1\2\1\1\2\2\1\1\1\2\2\1\1\2"+
    "\3\1\4\2\2\1\2\2\1\1\4\2\2\1\1\0"+
    "\1\1\1\2\1\1\1\2\1\1\2\2\3\1\1\2"+
    "\1\1\1\2\1\1\3\2\1\1\1\0\3\2\1\1"+
    "\1\0\2\1\4\0\1\1\3\0\4\2\1\0\1\1"+
    "\5\2\1\0\1\1\7\2\1\0\1\2\1\0\2\1"+
    "\1\2\1\1\2\0\2\1\1\0\3\2\1\0\1\2"+
    "\1\1\1\2\1\0\1\2\1\0\3\2\1\1\2\2"+
    "\1\1\4\2\2\0\1\2\1\1\2\2\1\0\2\2"+
    "\2\1\1\0\3\2\1\1\1\0\1\2\1\0\1\1"+
    "\3\0\1\1\5\0\1\1\1\2\1\0\5\2\3\0"+
    "\2\2\1\0\5\1\1\2\1\0\2\1\2\2\1\0"+
    "\2\2\1\1\1\2\1\1\1\0\2\2\1\1\1\2"+
    "\3\1\3\0\4\1\1\0\1\2\2\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\2\2\2\0"+
    "\2\1\3\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\3\0\1\1\1\2\1\0\1\2\1\0\1\2"+
    "\2\0\1\2\2\0\1\2\2\0\1\2\2\0\1\2"+
    "\2\0\1\2\2\0\1\2\2\0\1\2\2\0\1\2"+
    "\2\0\1\2\124\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\223\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u06e4\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd"+
    "\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045"+
    "\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd"+
    "\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d"+
    "\0\u1e3e\0\u1e6f\0\u17ed\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64"+
    "\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec"+
    "\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274"+
    "\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc"+
    "\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2369"+
    "\0\u239a\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa"+
    "\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832"+
    "\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2584\0\u2958\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11"+
    "\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99"+
    "\0\u2cca\0\u1ddc\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0"+
    "\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2863"+
    "\0\u2f78\0\u2fa9\0\u2679\0\u2ba4\0\u2fda\0\u300b\0\u303c\0\u306d"+
    "\0\u2f78\0\u309e\0\u2fa9\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193"+
    "\0\u31c4\0\u31f5\0\u3226\0\u242d\0\u3257\0\u3288\0\u32b9\0\u32ea"+
    "\0\u331b\0\u334c\0\u337d\0\u33ae\0\u28c5\0\u1076\0\u33df\0\u3410"+
    "\0\u13e8\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567"+
    "\0\u3598\0\u303c\0\u306d\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d"+
    "\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815"+
    "\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u3751\0\u396c"+
    "\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4"+
    "\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c"+
    "\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04"+
    "\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c"+
    "\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114"+
    "\0\u4145\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c"+
    "\0\u42cd\0\u42fe\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3\0\u4424"+
    "\0\u4455\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac"+
    "\0\u45dd\0\u460e\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u4734"+
    "\0\u4765\0\u4796\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc"+
    "\0\u48ed\0\u491e\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44"+
    "\0\u4a75\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc"+
    "\0\u4bfd\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54"+
    "\0\u4d85\0\u4db6\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc"+
    "\0\u4f0d\0\u4f3e\0\u4f6f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\3\2\1\4\5\2\1\5\2\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\3\2\1\41\1\42\1\43\107\0\1\44"+
    "\73\0\1\45\2\0\1\45\34\0\1\46\1\47\3\46"+
    "\1\50\1\51\1\52\3\46\1\53\1\52\1\54\3\46"+
    "\1\55\2\52\6\46\5\0\1\2\21\0\1\46\1\56"+
    "\2\46\1\57\11\46\1\60\5\46\1\61\3\46\1\52"+
    "\1\46\27\0\1\62\1\46\1\63\13\46\1\64\13\46"+
    "\27\0\3\46\1\65\4\46\1\66\5\46\1\67\5\46"+
    "\1\70\5\46\4\0\1\71\22\0\1\72\3\46\1\73"+
    "\6\46\1\74\7\46\1\75\1\46\1\76\4\46\27\0"+
    "\4\46\1\77\1\100\2\46\1\101\5\46\1\102\2\46"+
    "\1\103\1\46\1\104\1\105\5\46\4\0\1\106\22\0"+
    "\4\46\1\61\1\46\1\107\23\46\27\0\1\110\3\46"+
    "\1\111\2\46\1\112\1\113\5\46\1\114\4\46\1\115"+
    "\6\46\4\0\1\116\12\0\1\117\7\0\5\46\1\52"+
    "\2\46\1\120\3\46\1\52\1\121\4\46\1\122\1\123"+
    "\1\46\1\124\4\46\4\0\1\125\1\126\21\0\1\127"+
    "\10\46\1\130\12\46\1\131\5\46\27\0\12\46\1\132"+
    "\2\46\1\133\14\46\6\0\1\134\20\0\1\50\3\46"+
    "\1\135\3\46\1\136\2\46\1\137\2\46\1\140\13\46"+
    "\4\0\1\141\22\0\1\142\3\46\1\52\7\46\1\143"+
    "\1\46\1\144\5\46\1\145\3\46\1\146\1\46\27\0"+
    "\4\46\1\147\10\46\1\150\1\151\13\46\27\0\1\46"+
    "\1\152\3\46\1\153\1\46\1\52\2\46\1\52\2\46"+
    "\1\154\1\155\2\46\1\52\1\46\1\156\1\157\1\160"+
    "\1\161\3\46\6\0\1\2\20\0\17\46\1\162\4\46"+
    "\1\61\5\46\27\0\20\46\1\163\3\46\1\164\5\46"+
    "\27\0\4\46\1\165\14\46\1\166\10\46\27\0\1\167"+
    "\3\46\1\170\2\46\1\171\1\172\5\46\1\173\3\46"+
    "\1\174\1\46\1\72\5\46\4\0\1\175\1\176\21\0"+
    "\7\46\1\177\6\46\1\200\2\46\1\201\1\46\1\202"+
    "\2\46\1\203\3\46\27\0\15\46\1\204\1\46\1\52"+
    "\2\46\1\205\1\46\1\206\5\46\5\0\1\207\21\0"+
    "\4\46\1\210\20\46\1\211\4\46\27\0\1\212\3\46"+
    "\1\213\2\46\1\214\1\215\5\46\1\216\7\46\1\217"+
    "\3\46\4\0\1\220\22\0\27\46\1\35\2\46\27\0"+
    "\1\221\3\46\1\222\11\46\1\223\11\46\1\224\1\46"+
    "\27\0\31\46\1\37\31\0\1\225\46\0\1\117\14\0"+
    "\1\2\2\0\1\125\3\0\1\2\1\226\4\0\1\126"+
    "\1\227\1\0\1\230\10\0\1\125\1\126\21\0\1\231"+
    "\3\0\1\232\2\0\1\233\1\175\5\0\1\234\3\0"+
    "\1\176\1\0\1\235\11\0\1\175\1\176\33\0\1\134"+
    "\2\0\1\236\22\0\1\134\43\0\1\2\32\0\1\237"+
    "\63\0\32\46\27\0\16\46\1\240\13\46\27\0\23\46"+
    "\1\160\6\46\27\0\1\241\31\46\27\0\13\46\1\52"+
    "\1\242\5\46\1\243\7\46\5\0\1\244\21\0\3\46"+
    "\1\52\24\46\1\245\1\46\27\0\4\46\1\122\25\46"+
    "\27\0\1\46\1\56\30\46\27\0\2\46\1\246\1\46"+
    "\1\161\1\247\2\46\1\250\2\46\1\251\7\46\1\252"+
    "\6\46\4\0\1\253\22\0\23\46\1\221\6\46\27\0"+
    "\23\46\1\52\6\46\27\0\15\46\1\254\14\46\27\0"+
    "\2\46\1\63\27\46\27\0\14\46\1\124\7\46\1\255"+
    "\5\46\27\0\3\46\1\65\26\46\27\0\3\46\1\122"+
    "\26\46\27\0\4\46\1\212\3\46\1\250\4\46\1\256"+
    "\10\46\1\161\3\46\4\0\1\253\22\0\21\46\1\257"+
    "\10\46\32\0\1\126\55\0\2\46\1\221\27\46\27\0"+
    "\4\46\1\73\25\46\27\0\22\46\1\124\7\46\5\0"+
    "\1\230\21\0\2\46\1\52\27\46\27\0\4\46\1\161"+
    "\25\46\27\0\26\46\1\52\3\46\27\0\5\46\1\100"+
    "\24\46\27\0\13\46\1\260\16\46\27\0\21\46\1\52"+
    "\10\46\27\0\16\46\1\261\13\46\27\0\17\46\1\262"+
    "\12\46\27\0\21\46\1\263\10\46\42\0\1\264\45\0"+
    "\6\46\1\107\23\46\27\0\1\127\2\46\1\122\16\46"+
    "\1\122\2\46\1\265\4\46\5\0\1\126\11\0\1\266"+
    "\7\0\3\46\1\52\15\46\1\267\1\52\7\46\5\0"+
    "\1\2\21\0\7\46\1\112\22\46\27\0\14\46\1\146"+
    "\5\46\1\52\7\46\5\0\1\2\21\0\26\46\1\270"+
    "\3\46\27\0\23\46\1\271\6\46\43\0\1\272\5\0"+
    "\1\2\14\0\1\2\24\0\1\2\7\0\1\273\1\2"+
    "\10\0\1\230\33\0\10\46\1\120\21\46\4\0\1\125"+
    "\22\0\23\46\1\243\6\46\27\0\15\46\1\256\14\46"+
    "\17\0\1\274\7\0\22\46\1\275\7\46\5\0\1\276"+
    "\21\0\4\46\1\52\25\46\37\0\1\125\25\0\1\125"+
    "\37\0\1\277\43\0\1\127\31\46\27\0\11\46\1\130"+
    "\20\46\27\0\22\46\1\61\7\46\5\0\1\44\21\0"+
    "\12\46\1\132\17\46\6\0\1\134\20\0\4\46\1\77"+
    "\11\46\1\300\13\46\41\0\1\134\25\0\1\134\20\0"+
    "\23\46\1\301\6\46\27\0\12\46\1\302\17\46\6\0"+
    "\1\303\20\0\13\46\1\137\16\46\27\0\13\46\1\52"+
    "\16\46\41\0\1\303\25\0\1\303\20\0\15\46\1\304"+
    "\12\46\1\305\1\46\27\0\14\46\1\143\15\46\27\0"+
    "\21\46\1\124\1\61\7\46\5\0\1\44\21\0\2\46"+
    "\1\221\17\46\1\306\7\46\5\0\1\307\21\0\22\46"+
    "\1\310\7\46\5\0\1\311\21\0\4\46\1\312\25\46"+
    "\27\0\15\46\1\150\14\46\27\0\21\46\1\52\1\46"+
    "\1\52\6\46\27\0\25\46\1\313\4\46\27\0\5\46"+
    "\1\52\24\46\27\0\2\46\1\124\10\46\1\304\16\46"+
    "\27\0\16\46\1\155\13\46\27\0\7\46\1\160\22\46"+
    "\27\0\6\46\1\314\12\46\1\315\1\46\1\52\6\46"+
    "\27\0\4\46\1\102\25\46\27\0\15\46\1\52\14\46"+
    "\27\0\17\46\1\162\12\46\27\0\20\46\1\163\11\46"+
    "\27\0\16\46\1\61\13\46\27\0\1\316\31\46\27\0"+
    "\21\46\1\166\10\46\27\0\14\46\1\124\15\46\27\0"+
    "\15\46\1\74\14\46\27\0\1\317\3\46\1\320\11\46"+
    "\1\321\13\46\27\0\14\46\1\322\1\323\14\46\27\0"+
    "\14\46\1\324\15\46\27\0\22\46\1\174\7\46\5\0"+
    "\1\176\35\0\1\325\1\326\65\0\1\176\14\0\1\176"+
    "\21\0\1\327\3\46\1\330\3\46\1\331\5\46\1\74"+
    "\2\46\1\332\10\46\4\0\1\333\22\0\16\46\1\52"+
    "\13\46\27\0\24\46\1\124\3\46\1\52\1\46\27\0"+
    "\23\46\1\202\6\46\27\0\10\46\1\323\21\46\4\0"+
    "\1\326\22\0\3\46\1\160\7\46\1\334\7\46\1\335"+
    "\6\46\27\0\4\46\1\336\25\46\27\0\24\46\1\206"+
    "\5\46\33\0\1\337\54\0\21\46\1\304\10\46\27\0"+
    "\25\46\1\211\4\46\27\0\22\46\1\122\7\46\5\0"+
    "\1\126\11\0\1\340\7\0\3\46\1\52\15\46\1\55"+
    "\3\46\1\124\4\46\27\0\1\341\3\46\1\342\3\46"+
    "\1\343\5\46\1\344\11\46\1\270\1\46\4\0\1\345"+
    "\22\0\13\46\1\140\7\46\1\346\6\46\27\0\15\46"+
    "\1\256\6\46\1\255\5\46\27\0\26\46\1\217\3\46"+
    "\42\0\1\273\7\0\1\347\35\0\7\46\1\52\22\46"+
    "\27\0\1\221\21\46\2\52\6\46\5\0\1\2\21\0"+
    "\24\46\1\350\5\46\27\0\30\46\1\224\1\46\36\0"+
    "\1\351\74\0\1\244\25\0\1\274\31\0\1\276\14\0"+
    "\1\276\25\0\1\2\70\0\1\230\61\0\1\352\43\0"+
    "\1\353\3\0\1\354\11\0\1\355\56\0\1\356\46\0"+
    "\1\357\62\0\1\360\11\0\1\361\36\0\1\362\3\0"+
    "\32\362\27\0\24\46\1\61\1\124\4\46\27\0\10\46"+
    "\1\363\21\46\4\0\1\364\22\0\16\46\1\131\13\46"+
    "\45\0\1\2\42\0\23\46\1\365\6\46\27\0\1\366"+
    "\31\46\27\0\16\46\1\367\13\46\27\0\15\46\1\370"+
    "\14\46\27\0\16\46\1\77\13\46\27\0\26\46\1\371"+
    "\3\46\44\0\1\372\33\0\1\44\7\0\15\46\1\164"+
    "\5\46\1\52\6\46\27\0\13\46\1\66\16\46\17\0"+
    "\1\44\7\0\23\46\1\52\6\46\27\0\10\46\1\250"+
    "\21\46\4\0\1\253\22\0\4\46\1\262\25\46\27\0"+
    "\14\46\1\52\15\46\26\0\1\373\32\46\27\0\23\46"+
    "\1\156\6\46\33\0\1\374\54\0\4\46\1\122\3\46"+
    "\1\250\21\46\4\0\1\253\25\0\1\2\7\0\1\273"+
    "\6\0\1\2\14\0\1\2\21\0\4\46\1\270\15\46"+
    "\1\275\7\46\5\0\1\276\11\0\1\333\7\0\22\46"+
    "\1\52\7\46\5\0\1\2\21\0\17\46\1\375\12\46"+
    "\51\0\1\311\14\0\1\311\34\0\1\2\60\0\1\273"+
    "\6\0\1\2\14\0\1\2\21\0\4\46\1\376\25\46"+
    "\33\0\1\377\44\0\1\44\32\0\1\2\35\0\26\46"+
    "\1\u0100\3\46\17\0\1\333\7\0\32\46\27\0\4\46"+
    "\1\u0101\25\46\33\0\1\u0102\54\0\30\46\1\52\1\46"+
    "\27\0\1\46\1\124\30\46\27\0\23\46\1\u0103\6\46"+
    "\52\0\1\u0104\35\0\3\46\1\52\26\46\27\0\10\46"+
    "\1\u0105\21\46\4\0\1\u0106\22\0\7\46\1\61\22\46"+
    "\27\0\22\46\1\u0107\7\46\5\0\1\u0108\21\0\13\46"+
    "\1\u0109\16\46\27\0\15\46\1\u010a\14\46\17\0\1\266"+
    "\7\0\22\46\1\52\7\46\5\0\1\2\21\0\24\46"+
    "\1\255\5\46\27\0\17\46\1\u0109\12\46\27\0\2\46"+
    "\1\124\27\46\27\0\4\46\1\245\25\46\46\0\1\u010b"+
    "\43\0\1\230\56\0\15\46\1\52\5\46\1\270\6\46"+
    "\27\0\1\46\1\u010c\6\46\1\u010d\3\46\1\u010e\1\52"+
    "\3\46\1\u010f\1\124\5\46\1\u0110\1\46\4\0\1\u0111"+
    "\1\230\21\0\22\46\1\52\7\46\5\0\1\2\21\0"+
    "\16\46\1\u0112\13\46\51\0\1\2\14\0\1\2\21\0"+
    "\4\46\1\u0113\25\46\27\0\10\46\1\140\21\46\4\0"+
    "\1\273\25\0\1\2\60\0\1\2\7\0\1\273\5\0"+
    "\1\230\3\0\1\230\33\0\23\46\1\270\6\46\27\0"+
    "\15\46\1\u0114\3\46\1\u0115\10\46\27\0\2\46\1\221"+
    "\10\46\1\124\16\46\17\0\1\333\7\0\14\46\1\52"+
    "\5\46\1\52\7\46\5\0\1\2\23\0\1\357\10\0"+
    "\1\230\45\0\7\46\1\u0116\22\46\36\0\1\u0117\41\0"+
    "\1\340\7\0\3\46\1\52\7\46\1\140\5\46\1\u0118"+
    "\3\46\1\124\4\46\27\0\1\u0119\102\0\1\230\14\0"+
    "\1\230\36\0\1\u011a\33\0\1\266\31\0\1\2\14\0"+
    "\1\2\45\0\1\u011b\40\0\1\u011c\63\0\1\2\77\0"+
    "\1\2\60\0\1\u011d\32\0\15\46\1\u011e\14\46\44\0"+
    "\1\u011f\43\0\7\46\1\257\22\46\27\0\24\46\1\74"+
    "\5\46\27\0\21\46\1\124\10\46\27\0\6\46\1\52"+
    "\23\46\27\0\4\46\1\76\25\46\35\0\1\2\47\0"+
    "\1\u0120\62\0\1\373\60\0\1\373\22\46\1\262\7\46"+
    "\5\0\1\374\21\0\13\46\1\u0121\16\46\42\0\1\u0122"+
    "\45\0\13\46\1\304\16\46\42\0\1\u0123\45\0\16\46"+
    "\1\u0124\13\46\45\0\1\u0125\42\0\4\46\1\u0126\25\46"+
    "\33\0\1\u0127\44\0\1\44\7\0\32\46\27\0\10\46"+
    "\1\u0128\21\46\4\0\1\u0129\22\0\21\46\1\u0100\10\46"+
    "\27\0\22\46\1\u012a\7\46\5\0\1\u012b\21\0\4\46"+
    "\1\270\25\46\17\0\1\340\7\0\3\46\1\52\7\46"+
    "\1\140\5\46\1\124\3\46\1\124\4\46\50\0\1\u011d"+
    "\37\0\24\46\1\u012c\5\46\27\0\22\46\1\331\7\46"+
    "\5\0\1\333\21\0\4\46\1\u0114\25\46\27\0\10\46"+
    "\1\161\5\46\1\u012d\13\46\4\0\1\u012e\32\0\1\u012e"+
    "\5\0\1\u012f\17\0\1\u012e\22\0\4\46\1\52\15\46"+
    "\1\u0130\7\46\5\0\1\u0131\36\0\1\u0132\33\0\1\44"+
    "\103\0\1\71\70\0\1\u0133\57\0\1\44\14\0\1\44"+
    "\16\0\1\u0134\70\0\1\2\103\0\1\2\30\0\24\46"+
    "\1\u0135\5\46\53\0\1\u0136\34\0\13\46\1\u0137\16\46"+
    "\42\0\1\u0138\45\0\23\46\1\u0139\6\46\52\0\1\u013a"+
    "\35\0\6\46\1\221\23\46\27\0\24\46\1\61\5\46"+
    "\44\0\1\2\67\0\1\44\34\0\4\46\1\u013b\25\46"+
    "\33\0\1\u013c\62\0\1\u013d\61\0\1\u013e\35\0\1\u0134"+
    "\1\u013f\1\0\1\u013f\4\0\3\u013f\1\u0134\32\u013f\3\0"+
    "\1\u013f\23\0\22\46\1\u0101\7\46\5\0\1\u0102\43\0"+
    "\1\u0102\14\0\1\u0102\21\0\25\46\1\u0140\4\46\54\0"+
    "\1\u0141\33\0\2\46\1\u0142\27\46\31\0\1\u0143\56\0"+
    "\13\46\1\u0144\16\46\42\0\1\u0145\51\0\1\u0146\64\0"+
    "\1\253\25\0\1\253\22\0\4\46\1\331\25\46\33\0"+
    "\1\333\54\0\16\46\1\u0147\13\46\45\0\1\u0148\42\0"+
    "\5\46\1\52\17\46\1\u0140\4\46\34\0\1\2\17\0"+
    "\1\u0141\56\0\1\u0149\35\0\10\46\1\u014a\21\46\4\0"+
    "\1\u014b\32\0\1\u014b\25\0\1\u014b\32\0\1\u014c\25\0"+
    "\1\u014c\22\0\15\46\1\u014d\14\46\44\0\1\u014e\62\0"+
    "\1\u014f\41\0\23\46\1\u0150\6\46\52\0\1\u0151\45\0"+
    "\1\u0152\25\0\1\u0152\22\0\10\46\1\u0153\21\46\4\0"+
    "\1\u0154\32\0\1\u0154\25\0\1\u0154\37\0\1\u0155\43\0"+
    "\17\46\1\u0156\12\46\46\0\1\u0157\46\0\1\u0158\53\0"+
    "\5\46\1\u0159\24\46\34\0\1\u015a\71\0\1\u015b\42\0"+
    "\16\46\1\u015c\13\46\45\0\1\u015d\76\0\1\u015e\24\0"+
    "\21\46\1\u015f\10\46\50\0\1\u0160\30\0\1\u0161\65\0"+
    "\1\u0162\1\0\32\46\25\0\1\u0162\67\0\1\u0163\1\0"+
    "\1\u0164\47\0\1\u0162\2\0\1\u0165\67\0\1\u0166\12\0"+
    "\1\u0167\12\0\1\u0166\45\0\1\u0168\45\0\1\u0169\25\0"+
    "\1\u0169\35\0\1\u016a\64\0\1\u016b\64\0\1\u016c\60\0"+
    "\1\u016d\41\0\1\u016b\53\0\1\u016e\100\0\1\u016f\63\0"+
    "\1\u0170\14\0\1\u0170\16\0\1\u0171\62\0\1\u016e\22\0"+
    "\1\u016b\14\0\1\u016b\12\0\1\u0172\64\0\1\u0173\51\0"+
    "\1\u0174\56\0\1\u0173\1\u0175\1\0\1\u0175\4\0\3\u0175"+
    "\1\u0173\32\u0175\3\0\1\u0175\21\0\1\u0176\46\0\1\u0173"+
    "\1\u0175\1\0\1\u0175\2\0\1\u0177\1\0\3\u0175\1\u0173"+
    "\32\u0175\3\0\1\u0175\4\0\2\u0178\1\0\12\u0178\1\u0179"+
    "\42\u0178\55\0\1\u017a\21\0\1\u017b\43\0\2\u0178\1\0"+
    "\12\u0178\1\u017c\42\u0178\52\0\1\u017d\20\0\1\u017e\3\0"+
    "\1\u017b\43\0\2\u0178\1\0\6\u0178\1\u017f\3\u0178\1\u017c"+
    "\42\u0178\22\0\1\u0180\65\0\1\u0181\47\0\1\u017b\10\0"+
    "\1\u0181\60\0\1\u0182\51\0\1\u0183\60\0\1\u0184\102\0"+
    "\1\u0185\14\0\1\u0185\36\0\1\u0186\44\0\1\u0187\65\0"+
    "\1\u0188\56\0\1\u0189\60\0\1\u018a\60\0\1\u018b\77\0"+
    "\1\u018c\52\0\1\u018d\53\0\1\u018e\25\0\1\u018e\24\0"+
    "\1\u018f\75\0\1\u0190\57\0\1\u0191\67\0\1\u0192\46\0"+
    "\1\u0193\55\0\1\u0194\25\0\1\u0194\35\0\1\u0195\50\0"+
    "\1\u0196\61\0\1\u0197\60\0\1\u0198\56\0\1\u0199\74\0"+
    "\1\u019a\65\0\1\u019b\71\0\1\u019c\30\0\1\u019d\45\0"+
    "\1\u019e\72\0\1\u019f\62\0\1\u01a0\1\0\1\u01a1\52\0"+
    "\1\u01a2\67\0\1\u01a3\12\0\1\u01a4\12\0\1\u01a3\45\0"+
    "\1\u01a5\65\0\1\u01a6\43\0\1\u01a7\64\0\1\u01a8\64\0"+
    "\1\u01a9\30\0\1\u01aa\71\0\1\u01a8\53\0\1\u01ab\100\0"+
    "\1\u01ac\35\0\1\u01ad\3\0\35\u01ad\21\0\1\u01ae\62\0"+
    "\1\u01ab\22\0\1\u01a8\14\0\1\u01a8\14\0\1\2\1\u01ad"+
    "\3\0\35\u01ad\21\0\1\u01af\47\0\1\u01af\1\u01b0\1\0"+
    "\1\u01b0\4\0\3\u01b0\1\u01af\32\u01b0\3\0\1\u01b0\7\0"+
    "\1\u01af\1\u01b0\1\0\1\u01b0\2\0\1\u01b1\1\0\3\u01b0"+
    "\1\u01af\32\u01b0\3\0\1\u01b0\60\0\1\u01b2\20\0\1\u01b3"+
    "\104\0\1\45\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\40\1\2\0\23\1\1\0\14\1\1\0"+
    "\7\1\2\0\21\1\1\0\33\1\1\0\22\1\1\0"+
    "\4\1\1\0\2\1\4\0\1\1\3\0\4\1\1\0"+
    "\6\1\1\0\10\1\1\0\1\1\1\0\4\1\2\0"+
    "\2\1\1\0\3\1\1\0\3\1\1\0\1\1\1\0"+
    "\13\1\2\0\4\1\1\0\4\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\3\0\1\1\5\0\2\1\1\0"+
    "\5\1\3\0\2\1\1\0\6\1\1\0\4\1\1\0"+
    "\5\1\1\0\7\1\3\0\4\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\2\0\2\1\3\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\3\0\2\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\124\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[435];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private FileWriter writer;

	private void writer(String buff){
		try {
            writer.write(buff);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  afiliado(java.io.Reader in) {
  	try{
		writer = new FileWriter("chunk-clean.txt", true);
	}catch(IOException e){
		e.printStackTrace();
	}
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
	try {
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 4: break;
          case 2:
            { writer(yytext());
            }
            // fall through
          case 5: break;
          case 3:
            { writer(" ");
            }
            // fall through
          case 6: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
