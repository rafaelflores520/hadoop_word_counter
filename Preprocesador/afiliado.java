// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Documents/Concurrencia/Proyecto/Preprocesador/Comment-Cleaner.jflex

//10,11,25,60,2
//Mandenos un fichero correcto please ;_;
import java.io.FileWriter;
import java.io.IOException;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class afiliado {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\0\1\5\1\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\5\1\14\1\15\1\16\1\17\12\20\1\21"+
    "\1\4\1\0\1\5\1\0\1\4\1\5\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\55\1\15\1\55\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\0\1\5\1\0\1\5\6\0\1\2\32\0\1\1"+
    "\217\0\2\57\115\0\1\60\u0200\0\1\1\177\0\13\1"+
    "\35\0\2\2\5\0\1\1\57\0\1\1\312\0\1\61"+
    "\325\0\1\1\377\0\u0100\62";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\35\1\3\0\1\1"+
    "\4\2\1\1\1\2\1\1\1\2\2\1\3\2\1\1"+
    "\2\2\1\1\1\2\1\1\1\2\1\0\1\2\1\1"+
    "\4\2\1\1\5\2\1\0\4\1\3\2\2\0\4\1"+
    "\1\2\3\1\1\2\1\1\1\2\1\1\2\2\1\1"+
    "\1\2\1\0\1\2\1\1\2\2\1\1\1\2\2\1"+
    "\1\2\3\1\4\2\2\1\2\2\1\1\4\2\2\1"+
    "\1\0\1\1\1\2\1\1\1\2\1\1\2\2\3\1"+
    "\1\2\1\1\1\2\1\1\3\2\1\1\1\0\3\2"+
    "\3\1\4\0\1\1\4\0\4\2\1\0\1\1\5\2"+
    "\1\0\1\1\11\2\1\0\1\2\1\0\2\1\1\2"+
    "\1\1\2\0\2\1\1\0\3\2\1\0\1\2\1\1"+
    "\1\2\1\0\1\2\1\0\3\2\1\1\3\2\1\1"+
    "\4\2\2\0\1\2\1\1\2\2\1\0\2\2\2\1"+
    "\1\0\3\2\1\1\1\0\1\2\1\0\1\1\2\0"+
    "\1\1\5\0\2\1\1\2\1\0\5\2\1\0\2\2"+
    "\2\0\2\2\1\0\5\1\1\2\1\0\2\1\2\2"+
    "\2\0\1\2\1\1\1\2\1\1\1\0\2\2\1\1"+
    "\1\2\3\1\2\0\2\1\1\0\2\1\2\2\1\0"+
    "\1\2\2\0\1\2\1\0\1\2\2\0\1\2\1\0"+
    "\2\2\2\0\2\1\2\0\2\2\1\0\1\2\1\0"+
    "\1\2\2\0\1\2\3\0\1\2\1\0\1\1\1\2"+
    "\2\0\1\2\2\0\1\2\4\0\1\2\207\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[476];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\231\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u0792\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57"+
    "\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f"+
    "\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17"+
    "\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf"+
    "\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47"+
    "\0\u1f7a\0\u1fad\0\u1fe0\0\u191a\0\u2013\0\u2046\0\u2079\0\u20ac"+
    "\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244"+
    "\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc"+
    "\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574"+
    "\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c"+
    "\0\u273f\0\u2772\0\u2574\0\u25a7\0\u27a5\0\u27d8\0\u280b\0\u283e"+
    "\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6"+
    "\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e"+
    "\0\u2ba1\0\u27a5\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3"+
    "\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b"+
    "\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u1f14\0\u2f6a\0\u2f9d\0\u2fd0"+
    "\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168"+
    "\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267\0\u2ad5\0\u329a\0\u32cd"+
    "\0\u28d7\0\u2e05\0\u3300\0\u3333\0\u3366\0\u3399\0\u329a\0\u33cc"+
    "\0\u32cd\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531"+
    "\0\u3564\0\u2640\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696"+
    "\0\u36c9\0\u2b3b\0\u36fc\0\u1155\0\u372f\0\u3762\0\u3795\0\u37c8"+
    "\0\u14eb\0\u37fb\0\u382e\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d"+
    "\0\u3366\0\u3399\0\u3960\0\u3993\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f"+
    "\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7"+
    "\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f"+
    "\0\u3b5e\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e\0\u3ec1\0\u3ef4"+
    "\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026\0\u4059\0\u408c"+
    "\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224"+
    "\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356\0\u4389\0\u43bc"+
    "\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb\0\u44ee\0\u4521\0\u4554"+
    "\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686\0\u46b9\0\u46ec"+
    "\0\u471f\0\u4752\0\u4785\0\u47b8\0\u47eb\0\u481e\0\u4851\0\u4884"+
    "\0\u48b7\0\u48ea\0\u491d\0\u4950\0\u4983\0\u49b6\0\u49e9\0\u4a1c"+
    "\0\u4a4f\0\u4a82\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4"+
    "\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19\0\u4d4c"+
    "\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\u4e4b\0\u4e7e\0\u4eb1\0\u4ee4"+
    "\0\u4f17\0\u4f4a\0\u4f7d\0\u4fb0\0\u4fe3\0\u5016\0\u5049\0\u507c"+
    "\0\u50af\0\u50e2\0\u5115\0\u5148\0\u517b\0\u51ae\0\u51e1\0\u5214"+
    "\0\u5247\0\u527a\0\u52ad\0\u52e0\0\u5313\0\u5346\0\u5379\0\u53ac"+
    "\0\u53df\0\u5412\0\u5445\0\u5478\0\u54ab\0\u54de\0\u5511\0\u5544"+
    "\0\u5577\0\u55aa\0\u55dd\0\u5610\0\u5643\0\u5676\0\u56a9\0\u56dc"+
    "\0\u570f\0\u5742\0\u5775\0\u57a8\0\u57db\0\u580e\0\u5841\0\u5874"+
    "\0\u58a7\0\u58da\0\u590d\0\u5940\0\u5973\0\u59a6\0\u59d9\0\u5a0c"+
    "\0\u5a3f\0\u5a72\0\u5aa5\0\u5ad8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[476];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\4\2\1\4\7\2\1\5\2\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\3\2\1\40\1\41\1\42\114\0\1\43\75\0"+
    "\1\44\2\0\1\45\36\0\1\46\1\47\3\50\1\51"+
    "\1\52\1\53\3\50\1\54\1\53\1\55\3\50\1\56"+
    "\2\53\6\50\4\0\1\2\24\0\1\50\1\57\2\50"+
    "\1\60\11\50\1\61\5\50\1\62\3\50\1\53\1\50"+
    "\31\0\1\63\1\50\1\64\4\50\1\65\6\50\1\66"+
    "\13\50\31\0\3\50\1\67\4\50\1\70\5\50\1\71"+
    "\5\50\1\72\5\50\3\0\1\73\25\0\1\74\3\50"+
    "\1\75\6\50\1\76\7\50\1\77\1\50\1\100\4\50"+
    "\31\0\4\50\1\101\1\102\2\50\1\103\5\50\1\104"+
    "\2\50\1\105\1\50\1\106\1\107\5\50\3\0\1\110"+
    "\25\0\4\50\1\62\1\50\1\111\23\50\31\0\1\112"+
    "\3\50\1\113\2\50\1\114\1\115\5\50\1\116\4\50"+
    "\1\117\6\50\3\0\1\120\13\0\1\121\11\0\5\50"+
    "\1\53\2\50\1\122\3\50\1\53\1\123\4\50\1\124"+
    "\1\125\1\50\1\126\4\50\3\0\1\127\1\130\24\0"+
    "\1\46\10\50\1\131\12\50\1\132\5\50\31\0\12\50"+
    "\1\133\2\50\1\134\14\50\5\0\1\135\23\0\1\51"+
    "\3\50\1\136\3\50\1\137\2\50\1\140\2\50\1\141"+
    "\13\50\3\0\1\142\25\0\1\143\3\50\1\53\7\50"+
    "\1\144\1\50\1\145\5\50\1\146\3\50\1\147\1\50"+
    "\31\0\4\50\1\150\10\50\1\151\1\152\13\50\31\0"+
    "\1\50\1\153\3\50\1\154\1\50\1\53\2\50\1\53"+
    "\2\50\1\155\1\156\2\50\1\53\1\50\1\157\1\160"+
    "\1\161\1\162\3\50\5\0\1\2\23\0\17\50\1\163"+
    "\4\50\1\62\5\50\31\0\20\50\1\164\3\50\1\165"+
    "\5\50\31\0\4\50\1\166\14\50\1\167\10\50\31\0"+
    "\1\170\3\50\1\171\2\50\1\172\1\173\5\50\1\174"+
    "\3\50\1\175\1\50\1\74\5\50\3\0\1\176\1\177"+
    "\24\0\7\50\1\200\6\50\1\201\2\50\1\202\1\50"+
    "\1\203\2\50\1\204\3\50\31\0\15\50\1\205\1\50"+
    "\1\53\2\50\1\206\1\50\1\207\5\50\4\0\1\210"+
    "\24\0\4\50\1\211\20\50\1\212\4\50\31\0\1\213"+
    "\3\50\1\214\2\50\1\215\1\216\5\50\1\217\7\50"+
    "\1\220\3\50\3\0\1\221\25\0\27\50\1\35\2\50"+
    "\31\0\1\222\3\50\1\223\11\50\1\224\11\50\1\225"+
    "\1\50\31\0\31\50\1\37\17\0\1\121\16\0\1\2"+
    "\2\0\1\127\3\0\1\2\1\226\4\0\1\130\1\227"+
    "\1\0\1\230\7\0\1\127\1\130\24\0\1\231\3\0"+
    "\1\232\2\0\1\233\1\176\5\0\1\234\3\0\1\177"+
    "\1\0\1\235\10\0\1\176\1\177\36\0\1\135\2\0"+
    "\1\236\21\0\1\135\46\0\1\2\34\0\1\237\62\0"+
    "\1\240\65\0\1\46\31\50\31\0\16\50\1\241\13\50"+
    "\31\0\32\50\31\0\23\50\1\161\6\50\31\0\1\242"+
    "\31\50\31\0\13\50\1\53\1\243\5\50\1\244\7\50"+
    "\4\0\1\245\24\0\3\50\1\53\24\50\1\246\1\50"+
    "\31\0\4\50\1\124\25\50\31\0\1\50\1\57\30\50"+
    "\31\0\2\50\1\247\1\50\1\162\1\250\2\50\1\251"+
    "\2\50\1\252\7\50\1\253\6\50\3\0\1\254\25\0"+
    "\23\50\1\222\6\50\31\0\23\50\1\53\6\50\31\0"+
    "\15\50\1\255\14\50\31\0\2\50\1\64\27\50\31\0"+
    "\1\256\31\50\31\0\14\50\1\126\7\50\1\257\5\50"+
    "\31\0\3\50\1\67\26\50\31\0\3\50\1\124\26\50"+
    "\31\0\4\50\1\213\3\50\1\251\4\50\1\260\10\50"+
    "\1\162\3\50\3\0\1\254\25\0\21\50\1\261\10\50"+
    "\34\0\1\130\57\0\2\50\1\222\27\50\31\0\4\50"+
    "\1\75\25\50\31\0\22\50\1\126\7\50\4\0\1\230"+
    "\24\0\2\50\1\53\27\50\31\0\4\50\1\162\25\50"+
    "\31\0\26\50\1\53\3\50\31\0\5\50\1\102\24\50"+
    "\31\0\13\50\1\262\16\50\31\0\13\50\1\263\5\50"+
    "\1\53\10\50\31\0\16\50\1\264\13\50\31\0\17\50"+
    "\1\265\12\50\31\0\21\50\1\266\10\50\44\0\1\267"+
    "\47\0\6\50\1\111\23\50\31\0\1\46\2\50\1\124"+
    "\16\50\1\124\2\50\1\270\4\50\4\0\1\130\12\0"+
    "\1\271\11\0\3\50\1\53\15\50\1\272\1\53\7\50"+
    "\4\0\1\2\24\0\7\50\1\114\22\50\31\0\14\50"+
    "\1\147\5\50\1\53\7\50\4\0\1\2\24\0\26\50"+
    "\1\273\3\50\31\0\23\50\1\274\6\50\45\0\1\275"+
    "\5\0\1\2\13\0\1\2\27\0\1\2\7\0\1\276"+
    "\1\2\10\0\1\230\35\0\10\50\1\122\21\50\3\0"+
    "\1\127\25\0\23\50\1\244\6\50\31\0\15\50\1\260"+
    "\14\50\17\0\1\277\11\0\22\50\1\300\7\50\4\0"+
    "\1\301\24\0\4\50\1\53\25\50\41\0\1\127\24\0"+
    "\1\127\42\0\1\302\45\0\11\50\1\131\20\50\31\0"+
    "\22\50\1\62\7\50\4\0\1\43\24\0\12\50\1\133"+
    "\17\50\5\0\1\135\23\0\4\50\1\101\11\50\1\303"+
    "\13\50\43\0\1\135\24\0\1\135\23\0\23\50\1\304"+
    "\6\50\31\0\12\50\1\305\17\50\5\0\1\306\23\0"+
    "\13\50\1\140\16\50\31\0\13\50\1\53\16\50\43\0"+
    "\1\306\24\0\1\306\23\0\15\50\1\307\12\50\1\310"+
    "\1\50\31\0\14\50\1\144\15\50\31\0\21\50\1\126"+
    "\1\62\7\50\4\0\1\43\24\0\2\50\1\222\17\50"+
    "\1\311\7\50\4\0\1\312\24\0\22\50\1\313\7\50"+
    "\4\0\1\314\24\0\4\50\1\315\25\50\31\0\15\50"+
    "\1\151\14\50\31\0\21\50\1\53\1\50\1\53\6\50"+
    "\31\0\25\50\1\316\4\50\31\0\5\50\1\53\24\50"+
    "\31\0\2\50\1\126\10\50\1\307\16\50\31\0\16\50"+
    "\1\156\13\50\31\0\7\50\1\161\22\50\31\0\6\50"+
    "\1\317\12\50\1\320\1\50\1\53\6\50\31\0\4\50"+
    "\1\321\25\50\31\0\15\50\1\53\14\50\31\0\17\50"+
    "\1\163\12\50\31\0\20\50\1\164\11\50\31\0\16\50"+
    "\1\62\13\50\31\0\1\322\31\50\31\0\21\50\1\167"+
    "\10\50\31\0\14\50\1\126\15\50\31\0\15\50\1\76"+
    "\14\50\31\0\1\323\3\50\1\324\11\50\1\325\13\50"+
    "\31\0\14\50\1\326\1\327\14\50\31\0\14\50\1\330"+
    "\15\50\31\0\22\50\1\175\7\50\4\0\1\177\40\0"+
    "\1\331\1\332\67\0\1\177\13\0\1\177\24\0\1\333"+
    "\3\50\1\334\3\50\1\335\5\50\1\76\2\50\1\336"+
    "\10\50\3\0\1\337\25\0\16\50\1\53\13\50\31\0"+
    "\24\50\1\126\3\50\1\53\1\50\31\0\23\50\1\203"+
    "\6\50\31\0\10\50\1\327\21\50\3\0\1\332\25\0"+
    "\3\50\1\161\7\50\1\340\7\50\1\341\6\50\31\0"+
    "\4\50\1\342\25\50\31\0\24\50\1\207\5\50\35\0"+
    "\1\343\56\0\21\50\1\307\10\50\31\0\25\50\1\212"+
    "\4\50\31\0\22\50\1\124\7\50\4\0\1\130\12\0"+
    "\1\344\11\0\3\50\1\53\15\50\1\56\3\50\1\126"+
    "\4\50\31\0\1\345\3\50\1\346\3\50\1\347\5\50"+
    "\1\350\11\50\1\273\1\50\3\0\1\351\25\0\13\50"+
    "\1\141\7\50\1\352\6\50\31\0\15\50\1\260\6\50"+
    "\1\257\5\50\31\0\26\50\1\220\3\50\44\0\1\276"+
    "\7\0\1\353\37\0\7\50\1\53\22\50\31\0\1\222"+
    "\21\50\2\53\6\50\4\0\1\2\24\0\24\50\1\354"+
    "\5\50\31\0\30\50\1\225\1\50\54\0\1\245\25\0"+
    "\1\277\33\0\1\301\13\0\1\301\30\0\1\2\72\0"+
    "\1\230\63\0\1\355\45\0\1\356\3\0\1\357\11\0"+
    "\1\360\60\0\1\361\50\0\1\362\64\0\1\363\11\0"+
    "\1\364\37\0\1\365\4\0\32\365\24\0\1\366\4\0"+
    "\32\366\31\0\24\50\1\62\1\126\4\50\31\0\10\50"+
    "\1\367\21\50\3\0\1\370\25\0\16\50\1\132\13\50"+
    "\47\0\1\2\44\0\23\50\1\371\6\50\31\0\1\372"+
    "\31\50\31\0\16\50\1\373\13\50\31\0\15\50\1\374"+
    "\14\50\31\0\16\50\1\101\13\50\31\0\26\50\1\375"+
    "\3\50\46\0\1\376\33\0\1\43\11\0\15\50\1\165"+
    "\5\50\1\53\6\50\31\0\15\50\1\377\14\50\31\0"+
    "\13\50\1\70\16\50\17\0\1\43\11\0\23\50\1\53"+
    "\6\50\31\0\10\50\1\251\21\50\3\0\1\254\25\0"+
    "\4\50\1\265\25\50\31\0\13\50\1\u0100\16\50\31\0"+
    "\14\50\1\53\15\50\30\0\1\u0101\32\50\31\0\23\50"+
    "\1\157\6\50\35\0\1\u0102\56\0\4\50\1\124\3\50"+
    "\1\251\21\50\3\0\1\254\30\0\1\2\7\0\1\276"+
    "\6\0\1\2\13\0\1\2\24\0\4\50\1\273\15\50"+
    "\1\300\7\50\4\0\1\301\12\0\1\337\11\0\22\50"+
    "\1\53\7\50\4\0\1\2\24\0\17\50\1\u0103\12\50"+
    "\53\0\1\314\13\0\1\314\37\0\1\2\62\0\1\276"+
    "\6\0\1\2\13\0\1\2\24\0\4\50\1\u0104\25\50"+
    "\35\0\1\u0105\44\0\1\43\34\0\1\2\37\0\26\50"+
    "\1\u0106\3\50\17\0\1\337\11\0\32\50\31\0\4\50"+
    "\1\u0107\25\50\35\0\1\u0108\56\0\30\50\1\53\1\50"+
    "\31\0\1\50\1\126\30\50\31\0\23\50\1\u0109\6\50"+
    "\54\0\1\u010a\37\0\3\50\1\53\26\50\31\0\10\50"+
    "\1\u010b\21\50\3\0\1\u010c\25\0\7\50\1\62\22\50"+
    "\31\0\22\50\1\u010d\7\50\4\0\1\u010e\24\0\21\50"+
    "\1\53\10\50\31\0\13\50\1\u010f\16\50\31\0\15\50"+
    "\1\u0110\14\50\17\0\1\271\11\0\22\50\1\53\7\50"+
    "\4\0\1\2\24\0\24\50\1\257\5\50\31\0\17\50"+
    "\1\u010f\12\50\31\0\2\50\1\126\27\50\31\0\4\50"+
    "\1\246\25\50\50\0\1\u0111\45\0\1\230\60\0\15\50"+
    "\1\53\5\50\1\273\6\50\10\0\3\u0112\16\0\10\50"+
    "\1\u0113\3\50\1\u0114\1\53\3\50\1\u0115\1\126\5\50"+
    "\1\u0116\1\50\3\0\1\u0117\1\230\24\0\22\50\1\53"+
    "\7\50\4\0\1\2\24\0\16\50\1\u0118\13\50\53\0"+
    "\1\2\13\0\1\2\24\0\4\50\1\u0119\25\50\31\0"+
    "\10\50\1\141\21\50\3\0\1\276\30\0\1\2\62\0"+
    "\1\2\7\0\1\276\5\0\1\230\3\0\1\230\35\0"+
    "\23\50\1\273\6\50\31\0\15\50\1\u011a\3\50\1\u011b"+
    "\10\50\31\0\2\50\1\222\10\50\1\126\16\50\17\0"+
    "\1\337\11\0\14\50\1\53\5\50\1\53\7\50\4\0"+
    "\1\2\26\0\1\362\10\0\1\230\47\0\7\50\1\u011c"+
    "\22\50\40\0\1\u011d\41\0\1\344\11\0\3\50\1\53"+
    "\7\50\1\141\5\50\1\u011e\3\50\1\126\4\50\53\0"+
    "\1\230\13\0\1\230\41\0\1\u011f\33\0\1\271\33\0"+
    "\1\2\13\0\1\2\50\0\1\u0120\42\0\1\u0121\65\0"+
    "\1\2\101\0\1\2\62\0\1\u0122\26\0\1\u0123\1\366"+
    "\4\0\32\366\31\0\15\50\1\u0124\14\50\46\0\1\u0125"+
    "\45\0\7\50\1\261\22\50\31\0\24\50\1\76\5\50"+
    "\31\0\21\50\1\126\10\50\31\0\6\50\1\53\23\50"+
    "\31\0\4\50\1\100\25\50\37\0\1\2\54\0\6\50"+
    "\1\u0126\23\50\31\0\16\50\1\u0127\13\50\26\0\1\u0128"+
    "\64\0\1\u0101\62\0\1\u0101\22\50\1\265\7\50\4\0"+
    "\1\u0102\24\0\13\50\1\u0129\16\50\44\0\1\u012a\47\0"+
    "\13\50\1\307\16\50\44\0\1\u012b\47\0\16\50\1\u012c"+
    "\13\50\47\0\1\u012d\44\0\4\50\1\u012e\25\50\35\0"+
    "\1\u012f\44\0\1\43\11\0\32\50\32\0\1\u0130\61\0"+
    "\21\50\1\u0106\10\50\31\0\22\50\1\u0131\7\50\4\0"+
    "\1\u0132\24\0\4\50\1\273\25\50\17\0\1\344\11\0"+
    "\3\50\1\53\7\50\1\141\5\50\1\126\3\50\1\126"+
    "\4\50\52\0\1\u0122\41\0\24\50\1\u0133\5\50\31\0"+
    "\22\50\1\335\7\50\4\0\1\337\24\0\4\50\1\u011a"+
    "\25\50\31\0\10\50\1\162\5\50\1\u0134\13\50\3\0"+
    "\1\u0135\35\0\1\u0135\5\0\1\u0136\16\0\1\u0135\25\0"+
    "\4\50\1\53\15\50\1\u0137\7\50\4\0\1\u0138\12\0"+
    "\1\43\107\0\1\73\72\0\1\u0139\16\0\3\u013a\123\0"+
    "\1\43\13\0\1\43\24\0\4\50\1\u013b\25\50\31\0"+
    "\26\50\1\u013c\3\50\26\0\1\u013d\72\0\1\2\105\0"+
    "\1\2\32\0\24\50\1\u013e\5\50\55\0\1\u013f\36\0"+
    "\13\50\1\u0140\16\50\44\0\1\u0141\57\0\1\u0142\24\0"+
    "\1\u0142\25\0\6\50\1\222\23\50\31\0\24\50\1\62"+
    "\5\50\46\0\1\2\71\0\1\43\36\0\4\50\1\u0143"+
    "\25\50\35\0\1\u0144\65\0\1\u0145\46\0\1\u0146\4\0"+
    "\35\u0146\26\0\23\50\1\u0147\6\50\10\0\3\u0148\16\0"+
    "\32\50\13\0\1\u013d\1\u0149\1\0\1\u0149\4\0\1\u013d"+
    "\1\u0149\1\u013d\2\u0149\1\u013d\32\u0149\31\0\22\50\1\u0107"+
    "\7\50\4\0\1\u0108\46\0\1\u0108\13\0\1\u0108\24\0"+
    "\25\50\1\u014a\4\50\56\0\1\u014b\60\0\1\u014c\37\0"+
    "\13\50\1\u014d\16\50\44\0\1\u014e\57\0\1\254\24\0"+
    "\1\254\4\0\3\u014f\11\0\1\u0146\4\0\35\u0146\26\0"+
    "\10\50\1\u0150\21\50\3\0\1\u0151\41\0\1\u0152\46\0"+
    "\4\50\1\335\25\50\35\0\1\337\60\0\1\u0153\60\0"+
    "\5\50\1\53\17\50\1\u014a\4\50\36\0\1\2\17\0"+
    "\1\u014b\63\0\1\u0154\34\0\17\50\1\u0155\12\50\50\0"+
    "\1\u0156\47\0\1\u0157\74\0\1\u0158\44\0\1\u0159\41\0"+
    "\3\u015a\16\0\32\50\10\0\3\u015a\60\0\3\u015b\111\0"+
    "\1\u015c\24\0\1\u015c\42\0\1\u015d\55\0\1\u015e\14\0"+
    "\1\u015f\7\0\1\u015e\50\0\1\u0160\54\0\1\u0161\70\0"+
    "\1\u0162\54\0\1\u0163\55\0\1\u0164\24\0\1\u0164\43\0"+
    "\1\u0165\23\0\3\u0166\123\0\1\u0167\13\0\1\u0167\31\0"+
    "\1\245\60\0\1\u0168\36\0\3\u0169\124\0\1\u016a\16\0"+
    "\3\u016b\105\0\1\245\47\0\1\u016c\101\0\1\u016d\24\0"+
    "\1\u016d\50\0\1\u016e\30\0\1\u016f\110\0\1\u0170\61\0"+
    "\1\u0171\76\0\1\u0172\7\0\3\u0173\60\0\3\u0174\103\0"+
    "\1\u0175\65\0\1\u0176\77\0\1\u0177\13\0\1\u0177\42\0"+
    "\1\u0178\62\0\1\u0179\50\0\1\u017a\71\0\1\u017b\70\0"+
    "\1\u017c\56\0\1\u017d\60\0\1\u017e\26\0\3\u017f\104\0"+
    "\1\u0180\63\0\1\u0181\54\0\1\u0182\43\0\3\u0183\103\0"+
    "\1\u0184\37\0\3\u0185\14\0\1\u0182\114\0\1\u0186\55\0"+
    "\1\u0187\40\0\1\u0188\77\0\1\u0189\23\0\3\u018a\111\0"+
    "\1\u018b\24\0\1\u018b\51\0\1\u018c\46\0\1\u018d\24\0"+
    "\1\u018d\50\0\1\u018e\16\0\3\u018f\124\0\1\u0190\61\0"+
    "\1\u0191\13\0\1\u0191\24\0\1\u0192\116\0\1\u0193\5\0"+
    "\3\u0194\60\0\3\u0195\70\0\1\u0196\62\0\1\u0197\74\0"+
    "\1\u0198\66\0\1\u0199\1\0\1\u019a\37\0\1\u019b\106\0"+
    "\1\u019c\24\0\1\u019c\35\0\1\u019d\12\0\1\u019e\11\0"+
    "\1\u019d\50\0\1\u019f\35\0\1\u01a0\107\0\1\u01a1\52\0"+
    "\1\u01a2\66\0\1\u01a3\66\0\1\u01a4\15\0\2\u01a5\2\0"+
    "\14\u01a5\1\u01a6\41\u01a5\25\0\1\u01a7\64\0\1\u01a3\55\0"+
    "\1\u01a8\102\0\1\u01a9\41\0\1\u01aa\42\0\2\u01a5\2\0"+
    "\14\u01a5\1\u01ab\41\u01a5\41\0\1\u01ac\41\0\1\u01ad\64\0"+
    "\1\u01a8\22\0\1\u01a3\13\0\1\u01a3\14\0\1\u01ae\5\0"+
    "\1\u01aa\42\0\2\u01a5\2\0\6\u01a5\1\u01af\5\u01a5\1\u01ab"+
    "\41\u01a5\33\0\1\u01b0\24\0\1\u01b0\22\0\1\u01b1\44\0"+
    "\3\u01b2\60\0\3\u01b2\14\0\1\u01aa\101\0\1\u01b3\27\0"+
    "\1\u01b1\1\u01b4\1\0\1\u01b4\4\0\1\u01b1\1\u01b4\1\u01b1"+
    "\2\u01b4\1\u01b1\32\u01b4\40\0\1\u01b5\32\0\3\u01b6\63\0"+
    "\1\u01b1\1\u01b4\1\0\1\u01b4\2\0\1\u01b7\1\0\1\u01b1"+
    "\1\u01b4\1\u01b1\2\u01b4\1\u01b1\32\u01b4\31\0\1\u01b8\105\0"+
    "\1\u01b9\33\0\1\u01ba\110\0\1\u01bb\13\0\1\u01bb\34\0"+
    "\1\u01bc\24\0\1\u01bc\16\0\1\u01bd\50\0\3\u01be\120\0"+
    "\1\u01bf\34\0\1\2\72\0\1\u01c0\40\0\3\u01c1\105\0"+
    "\1\u01c2\63\0\1\u01c3\61\0\1\u01c4\74\0\1\u01c5\61\0"+
    "\1\u01c6\66\0\1\u01c7\20\0\3\u01c8\60\0\3\u01c9\103\0"+
    "\1\u01ca\56\0\1\u01cb\102\0\1\u01cc\23\0\3\u01cd\14\0"+
    "\1\u01cb\77\0\1\u01ce\50\0\1\u01cf\74\0\1\u01d0\57\0"+
    "\1\u01d1\24\0\1\u01d1\31\0\1\u01d2\101\0\1\337\41\0"+
    "\1\u01d3\103\0\1\u01d4\43\0\1\u01d5\61\0\1\u01d6\36\0"+
    "\3\u01d7\102\0\1\u01d8\111\0\1\u01d9\11\0\3\u01da\72\0"+
    "\1\u01db\64\0\1\u01dc\4\0\35\u01dc\17\0\1\2\1\0"+
    "\1\u01dc\4\0\35\u01dc\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23307];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\37\1\3\0\25\1\1\0\14\1\1\0"+
    "\7\1\2\0\20\1\1\0\33\1\1\0\22\1\1\0"+
    "\6\1\4\0\1\1\4\0\4\1\1\0\6\1\1\0"+
    "\12\1\1\0\1\1\1\0\4\1\2\0\2\1\1\0"+
    "\3\1\1\0\3\1\1\0\1\1\1\0\14\1\2\0"+
    "\4\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\5\0\3\1\1\0\5\1\1\0"+
    "\2\1\2\0\2\1\1\0\6\1\1\0\4\1\2\0"+
    "\4\1\1\0\7\1\2\0\2\1\1\0\4\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\2\1\2\0\2\1\2\0\2\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\3\0\1\1\1\0\2\1\2\0"+
    "\1\1\2\0\1\1\4\0\1\1\207\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[476];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private FileWriter writer;

	private void writer(String buff){
		try {
            writer.write(buff);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  afiliado(java.io.Reader in) {
  	try{
		writer = new FileWriter("chunk-clean.txt", true);
	}catch(IOException e){
		e.printStackTrace();
	}
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
	try {
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 4: break;
          case 2:
            { writer(yytext());
            }
            // fall through
          case 5: break;
          case 3:
            { writer(" ");
            }
            // fall through
          case 6: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
